openapi: 3.0.1
info:
  title: TripCheck API v1
  description: 'TripCheck API is designed to provide developers with access to the data available on ODOT’s traveler information website, including incidents, cameras, message signs, weather stations, and more. For more information, go to https://www.tripcheck.com/.'
  version: '1.0'
servers:
  - url: http://api.odot.state.or.us/tripcheck
  - url: https://api.odot.state.or.us/tripcheck
paths:
  /Cctv/Inventory:
    get:
      tags:
        - Cctv
      summary: CCTV Inventory
      description: "The CCTV Inventory datafeed provides an inventory of all available cameras \r\ncurrently displayed on TripCheck, along with an Internet URL that can be used \r\nto access the specific still camera image. Cameras may be ODOT owned and \r\nmaintained or owned and maintained by a partner agency."
      operationId: Cctv_GetInventoryFilter
      parameters:
        - name: DeviceId
          in: query
          description: "Accepts single device-id, or multiple comma\r\n            delimited device-ids. Ranges optional. Ex. \"157-160,281\""
          schema:
            type: string
        - name: DeviceName
          in: query
          description: "Accepts single device-name, or multiple comma\r\n            delimited device names. Performs a contains search.\r\n            Ex.  \"I-5 at Siskiyou Summit, Tollgate, I-84 at Clover Creek EB\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes."
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat \r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CctvInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                CCTVInventoryRequest:
                  - device-id: 0
                    device-name: string
                    latitude: 0
                    longitude: 0
                    hwy-id: string
                    route-id: string
                    milepoint: 0
                    cctv-url: string
                    cctv-other: string
                    last-update-time: string
            text/json:
              schema:
                $ref: '#/components/schemas/CctvInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                CCTVInventoryRequest:
                  - device-id: 0
                    device-name: string
                    latitude: 0
                    longitude: 0
                    hwy-id: string
                    route-id: string
                    milepoint: 0
                    cctv-url: string
                    cctv-other: string
                    last-update-time: string
            application/xml:
              schema:
                $ref: '#/components/schemas/CctvInventory'
              example: <CctvInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <CCTVInventoryRequest> <device-id>0</device-id> <device-name>string</device-name> <latitude>0</latitude> <longitude>0</longitude> <hwy-id>string</hwy-id> <route-id>string</route-id> <milepoint>0</milepoint> <cctv-url>string</cctv-url> <cctv-other>string</cctv-other> <last-update-time>string</last-update-time> </CCTVInventoryRequest> </CctvInventory>
            text/xml:
              schema:
                $ref: '#/components/schemas/CctvInventory'
              example: <CctvInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <CCTVInventoryRequest> <device-id>0</device-id> <device-name>string</device-name> <latitude>0</latitude> <longitude>0</longitude> <hwy-id>string</hwy-id> <route-id>string</route-id> <milepoint>0</milepoint> <cctv-url>string</cctv-url> <cctv-other>string</cctv-other> <last-update-time>string</last-update-time> </CCTVInventoryRequest> </CctvInventory>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: CCTV inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Cls/Speed:
    get:
      tags:
        - Cls
      summary: CLS Speed Data
      description: "Speed data aggregated by speed classification for each detector station. \r\nThe Bin Count represents the speed of vehicles that passed the detector \r\nstation in a 20 second period that fall into that particular speed classification."
      operationId: Cls_GetClsSpeedData
      parameters:
        - name: StationId
          in: query
          description: "Accepts a single station-id,\r\n            or multiple comma delimited station-ids.\r\n            Ranges optional. Ex. \"7, 9-20\""
          schema:
            type: string
        - name: Lane
          in: query
          description: "Accepts single lane, or multiple comma delimited lanes.\r\n            Ranges optional. Ex. \"1, 3-5\""
          schema:
            type: string
        - name: RecordedDate
          in: query
          description: "Accepts date and time recorded-date,\r\n            or multiple comma delimited recorded-dates. Performs a contains search.\r\n            Ex.  \"2016-10-12T12:36:03.8634263-07:00, 2017\""
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClsData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                CLS-inventory:
                  - station-id: 0
                    lane: 0
                    bin-number: 0
                    bin-count: 0
                    recorded-date: string
            text/json:
              schema:
                $ref: '#/components/schemas/ClsData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                CLS-inventory:
                  - station-id: 0
                    lane: 0
                    bin-number: 0
                    bin-count: 0
                    recorded-date: string
            application/xml:
              schema:
                $ref: '#/components/schemas/ClsData'
              example: <ClsData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <CLS-inventory> <station-id>0</station-id> <lane>0</lane> <bin-number>0</bin-number> <bin-count>0</bin-count> <recorded-date>string</recorded-date> </CLS-inventory> </ClsData>
            text/xml:
              schema:
                $ref: '#/components/schemas/ClsData'
              example: <ClsData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <CLS-inventory> <station-id>0</station-id> <lane>0</lane> <bin-number>0</bin-number> <bin-count>0</bin-count> <recorded-date>string</recorded-date> </CLS-inventory> </ClsData>
        '400':
          description: Invalid Parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Speed data not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '500':
          description: Internal error
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Cls/Length:
    get:
      tags:
        - Cls
      summary: CLS Length Data
      description: "Length data aggregated by length classification for each detector station. \r\nThe Bin Count represents the number of vehicles that passed the detector \r\nstation in a 20 second period that fall into that particular length classification."
      operationId: Cls_GetClsLengthData
      parameters:
        - name: StationId
          in: query
          description: "Accepts a single station-id,\r\n            or multiple comma delimited station-ids.\r\n            Ranges optional. Ex. \"7, 9-20\""
          schema:
            type: string
        - name: Lane
          in: query
          description: "Accepts single lane, or multiple comma delimited lanes.\r\n            Ranges optional. Ex. \"1, 3-5\""
          schema:
            type: string
        - name: RecordedDate
          in: query
          description: "Accepts date and time recorded-date,\r\n            or multiple comma delimited recorded-dates. Performs a contains search.\r\n            Ex.  \"2016-10-12T12:36:03.8634263-07:00, 2017\""
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClsData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                CLS-inventory:
                  - station-id: 0
                    lane: 0
                    bin-number: 0
                    bin-count: 0
                    recorded-date: string
            text/json:
              schema:
                $ref: '#/components/schemas/ClsData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                CLS-inventory:
                  - station-id: 0
                    lane: 0
                    bin-number: 0
                    bin-count: 0
                    recorded-date: string
            application/xml:
              schema:
                $ref: '#/components/schemas/ClsData'
              example: <ClsData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <CLS-inventory> <station-id>0</station-id> <lane>0</lane> <bin-number>0</bin-number> <bin-count>0</bin-count> <recorded-date>string</recorded-date> </CLS-inventory> </ClsData>
            text/xml:
              schema:
                $ref: '#/components/schemas/ClsData'
              example: <ClsData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <CLS-inventory> <station-id>0</station-id> <lane>0</lane> <bin-number>0</bin-number> <bin-count>0</bin-count> <recorded-date>string</recorded-date> </CLS-inventory> </ClsData>
        '400':
          description: Invalid Parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Length data not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '500':
          description: Internal error
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Cls/Inventory:
    get:
      tags:
        - Cls
      summary: CLS Inventory
      description: "Vehicle Length and Speed classifications for each Detector Station. \r\nThis data defines what vehicle length values are being used for aggregation.\r\nThe data is collected through web services on Automated Traffic Controllers (ATCs)."
      operationId: Cls_GetClsInventory
      parameters:
        - name: StationId
          in: query
          description: "Accepts a single station-id,\r\n            or multiple comma delimited station-ids.\r\n            Ranges optional. Ex. \"7, 9-20\""
          schema:
            type: string
        - name: Type
          in: query
          description: "Accepts single type, or multiple comma delimited types.\r\n            Ex. \"Length,Speed\""
          schema:
            type: string
        - name: BinValueDesc
          in: query
          description: "Accepts single bin-value-description,\r\n            or multiple comma delimited bin-value-descriptions.\r\n            Performs a contains search. Ex. \"1,20,40,60\""
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClsInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                cls-inventory-items:
                  - station-id: 0
                    type: string
                    bin-number: 0
                    bin-value-description: 0
                    configure-time: string
            text/json:
              schema:
                $ref: '#/components/schemas/ClsInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                cls-inventory-items:
                  - station-id: 0
                    type: string
                    bin-number: 0
                    bin-value-description: 0
                    configure-time: string
            application/xml:
              schema:
                $ref: '#/components/schemas/ClsInventory'
              example: <ClsInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <cls-inventory-items> <station-id>0</station-id> <type>string</type> <bin-number>0</bin-number> <bin-value-description>0</bin-value-description> <configure-time>string</configure-time> </cls-inventory-items> </ClsInventory>
            text/xml:
              schema:
                $ref: '#/components/schemas/ClsInventory'
              example: <ClsInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <cls-inventory-items> <station-id>0</station-id> <type>string</type> <bin-number>0</bin-number> <bin-value-description>0</bin-value-description> <configure-time>string</configure-time> </cls-inventory-items> </ClsInventory>
        '400':
          description: Invalid Parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: CLS inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '500':
          description: Internal error
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Dms/Inventory:
    get:
      tags:
        - Dms
      summary: DMS Inventory
      description: Name and Location of each Dynamic Message Sign on state highways or controlled by ODOT.
      operationId: Dms_GetInventoryFilter
      parameters:
        - name: DeviceId
          in: query
          description: "Accepts single device-id, or multiple comma delimited\r\n            device-ids. Ranges optional. Ex. \"209,223-229\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes."
          schema:
            type: string
        - name: Class
          in: query
          description: 'Accepts sign class, or multiple comma delimited sign classes. Ex. "VMS_VSS, VMS_Drum"'
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is \r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                dms-inventory-items:
                  - device-id: 0
                    device-name: string
                    latitude: 0
                    longitude: 0
                    elevation: 0
                    route-id: string
                    milepoint: 0
                    class: string
                    subclass: string
            text/json:
              schema:
                $ref: '#/components/schemas/DmsInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                dms-inventory-items:
                  - device-id: 0
                    device-name: string
                    latitude: 0
                    longitude: 0
                    elevation: 0
                    route-id: string
                    milepoint: 0
                    class: string
                    subclass: string
            application/xml:
              schema:
                $ref: '#/components/schemas/DmsInventory'
              example: <DmsInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <dms-inventory-items> <device-id>0</device-id> <device-name>string</device-name> <latitude>0</latitude> <longitude>0</longitude> <elevation>0</elevation> <route-id>string</route-id> <milepoint>0</milepoint> <class>string</class> <subclass>string</subclass> </dms-inventory-items> </DmsInventory>
            text/xml:
              schema:
                $ref: '#/components/schemas/DmsInventory'
              example: <DmsInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <dms-inventory-items> <device-id>0</device-id> <device-name>string</device-name> <latitude>0</latitude> <longitude>0</longitude> <elevation>0</elevation> <route-id>string</route-id> <milepoint>0</milepoint> <class>string</class> <subclass>string</subclass> </dms-inventory-items> </DmsInventory>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: DMS inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Dms/Status:
    get:
      tags:
        - Dms
      summary: DMS Status
      description: Statewide Dynamic Message Sign (DMS) returns current message data for active signs in the State of Oregon.
      operationId: Dms_GetStatus
      parameters:
        - name: DeviceId
          in: query
          description: "Accepts single device-id, or multiple comma delimited\r\n            device-ids. Ranges optional. Ex. \"209,223-229\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes."
          schema:
            type: string
        - name: Class
          in: query
          description: 'Accepts sign class, or multiple comma delimited sign classes. Ex. "VMS_VSS, VMS_Drum"'
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsStatus'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                dmsItems:
                  - device-id: 0
                    dms-device-status: string
                    tocsEventId: string
                    dmsCurrentMessage:
                      phase1Line1: string
                      phase1Line2: string
                      phase1Line3: string
                      phase2Line1: string
                      phase2Line2: string
                      phase2Line3: string
            text/json:
              schema:
                $ref: '#/components/schemas/DmsStatus'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                dmsItems:
                  - device-id: 0
                    dms-device-status: string
                    tocsEventId: string
                    dmsCurrentMessage:
                      phase1Line1: string
                      phase1Line2: string
                      phase1Line3: string
                      phase2Line1: string
                      phase2Line2: string
                      phase2Line3: string
            application/xml:
              schema:
                $ref: '#/components/schemas/DmsStatus'
              example: <DmsStatus> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <dmsItems> <device-id>0</device-id> <dms-device-status>string</dms-device-status> <tocsEventId>string</tocsEventId> <dmsCurrentMessage> <phase1Line1>string</phase1Line1> <phase1Line2>string</phase1Line2> <phase1Line3>string</phase1Line3> <phase2Line1>string</phase2Line1> <phase2Line2>string</phase2Line2> <phase2Line3>string</phase2Line3> </dmsCurrentMessage> </dmsItems> </DmsStatus>
            text/xml:
              schema:
                $ref: '#/components/schemas/DmsStatus'
              example: <DmsStatus> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <dmsItems> <device-id>0</device-id> <dms-device-status>string</dms-device-status> <tocsEventId>string</tocsEventId> <dmsCurrentMessage> <phase1Line1>string</phase1Line1> <phase1Line2>string</phase1Line2> <phase1Line3>string</phase1Line3> <phase2Line1>string</phase2Line1> <phase2Line2>string</phase2Line2> <phase2Line3>string</phase2Line3> </dmsCurrentMessage> </dmsItems> </DmsStatus>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: DMS statuses not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Incidents:
    get:
      tags:
        - Inc
      summary: Incidents
      description: 'Current traffic incidents that are being reported on State Highways by ODOT – e.g. crashes, planned closures, and construction zones.'
      operationId: Inc_GetIncidentsFilter
      parameters:
        - name: IncidentId
          in: query
          description: 'Accepts single incident-id, or multiple comma delimited incident-ids. Ranges optional. Ex. "224412, 100000-100010"'
          schema:
            type: string
        - name: EventId
          in: query
          description: 'Accepts single event-id, or multiple comma delimited event-ids. Ex. "20T001190,20T001182,20T001185"'
          schema:
            type: string
        - name: EventTypeId
          in: query
          description: "Accepts single event type identifiers, or multiple comma delimited type ids. \r\n            Enumerations held within the Metadata: Incidents datafeed. Ex. \"VH,RW,WT\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited route-ids. Performs a contains search. Ex. \"I5,US97,OR\" \r\n            returns every item on route I5, US97, and OR state routes."
          schema:
            type: string
        - name: IsActive
          in: query
          description: 'Accepts a Boolean response. Ex. “True” returns all active incidents, while “False” returns all inactive incidents.'
          schema:
            type: string
        - name: ImpactId
          in: query
          description: 'Accepts single impact-id, or multiple comma delimited impact-ids. Ex. "2,4,6"'
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is \r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncdIncidents'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                incidents:
                  - incident-id: string
                    event-id: string
                    event-type-id: string
                    event-subtype-id: string
                    update-time: string
                    create-time: string
                    is-active: string
                    impact-id: string
                    impact-desc: string
                    headline: string
                    comments: string
                    location:
                      location-name: string
                      route-id: string
                      hwy-id: string
                      direction: string
                      geometry-wkt-line: string
                      start-location:
                        location-desc: string
                        start-lat: 0
                        start-long: 0
                        start-milepost: 0
                        start-point-geometry-wkt: string
                      end-location:
                        location-desc: string
                        end-lat: 0
                        end-long: 0
                        end-milepost: 0
                        end-point-geometry-wkt: string
                    travel-lanes:
                      decreasing-direction: string
                      decreasing-lane-count: 0
                      increasing-direction: string
                      increasing-lane-count: 0
                      lane-edge-reference: string
                      affected-lanes:
                        - lane-id: string
                          lane-type: string
                          direction: string
                    off-hwy-lanes:
                      affected-lanes:
                        - lane-id: string
                          lane-type: string
                          direction: string
                    schedule:
                      project-schedule:
                        start-date-time: string
                        end-date-time: string
                    info-url: string
                    files:
                      - url: string
                        file-description: string
            text/json:
              schema:
                $ref: '#/components/schemas/IncdIncidents'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                incidents:
                  - incident-id: string
                    event-id: string
                    event-type-id: string
                    event-subtype-id: string
                    update-time: string
                    create-time: string
                    is-active: string
                    impact-id: string
                    impact-desc: string
                    headline: string
                    comments: string
                    location:
                      location-name: string
                      route-id: string
                      hwy-id: string
                      direction: string
                      geometry-wkt-line: string
                      start-location:
                        location-desc: string
                        start-lat: 0
                        start-long: 0
                        start-milepost: 0
                        start-point-geometry-wkt: string
                      end-location:
                        location-desc: string
                        end-lat: 0
                        end-long: 0
                        end-milepost: 0
                        end-point-geometry-wkt: string
                    travel-lanes:
                      decreasing-direction: string
                      decreasing-lane-count: 0
                      increasing-direction: string
                      increasing-lane-count: 0
                      lane-edge-reference: string
                      affected-lanes:
                        - lane-id: string
                          lane-type: string
                          direction: string
                    off-hwy-lanes:
                      affected-lanes:
                        - lane-id: string
                          lane-type: string
                          direction: string
                    schedule:
                      project-schedule:
                        start-date-time: string
                        end-date-time: string
                    info-url: string
                    files:
                      - url: string
                        file-description: string
            application/xml:
              schema:
                $ref: '#/components/schemas/IncdIncidents'
              example: <IncdIncidents> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <incidents> <incident-id>string</incident-id> <event-id>string</event-id> <event-type-id>string</event-type-id> <event-subtype-id>string</event-subtype-id> <update-time>string</update-time> <create-time>string</create-time> <is-active>string</is-active> <impact-id>string</impact-id> <impact-desc>string</impact-desc> <headline>string</headline> <comments>string</comments> <location> <location-name>string</location-name> <route-id>string</route-id> <hwy-id>string</hwy-id> <direction>string</direction> <geometry-wkt-line>string</geometry-wkt-line> <start-location> <location-desc>string</location-desc> <start-lat>0</start-lat> <start-long>0</start-long> <start-milepost>0</start-milepost> <start-point-geometry-wkt>string</start-point-geometry-wkt> </start-location> <end-location> <location-desc>string</location-desc> <end-lat>0</end-lat> <end-long>0</end-long> <end-milepost>0</end-milepost> <end-point-geometry-wkt>string</end-point-geometry-wkt> </end-location> </location> <travel-lanes> <decreasing-direction>string</decreasing-direction> <decreasing-lane-count>0</decreasing-lane-count> <increasing-direction>string</increasing-direction> <increasing-lane-count>0</increasing-lane-count> <lane-edge-reference>string</lane-edge-reference> <affected-lanes> <lane-id>string</lane-id> <lane-type>string</lane-type> <direction>string</direction> </affected-lanes> </travel-lanes> <off-hwy-lanes> <affected-lanes> <lane-id>string</lane-id> <lane-type>string</lane-type> <direction>string</direction> </affected-lanes> </off-hwy-lanes> <schedule> <project-schedule> <start-date-time>string</start-date-time> <end-date-time>string</end-date-time> </project-schedule> </schedule> <info-url>string</info-url> <files> <url>string</url> <file-description>string</file-description> </files> </incidents> </IncdIncidents>
            text/xml:
              schema:
                $ref: '#/components/schemas/IncdIncidents'
              example: <IncdIncidents> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <incidents> <incident-id>string</incident-id> <event-id>string</event-id> <event-type-id>string</event-type-id> <event-subtype-id>string</event-subtype-id> <update-time>string</update-time> <create-time>string</create-time> <is-active>string</is-active> <impact-id>string</impact-id> <impact-desc>string</impact-desc> <headline>string</headline> <comments>string</comments> <location> <location-name>string</location-name> <route-id>string</route-id> <hwy-id>string</hwy-id> <direction>string</direction> <geometry-wkt-line>string</geometry-wkt-line> <start-location> <location-desc>string</location-desc> <start-lat>0</start-lat> <start-long>0</start-long> <start-milepost>0</start-milepost> <start-point-geometry-wkt>string</start-point-geometry-wkt> </start-location> <end-location> <location-desc>string</location-desc> <end-lat>0</end-lat> <end-long>0</end-long> <end-milepost>0</end-milepost> <end-point-geometry-wkt>string</end-point-geometry-wkt> </end-location> </location> <travel-lanes> <decreasing-direction>string</decreasing-direction> <decreasing-lane-count>0</decreasing-lane-count> <increasing-direction>string</increasing-direction> <increasing-lane-count>0</increasing-lane-count> <lane-edge-reference>string</lane-edge-reference> <affected-lanes> <lane-id>string</lane-id> <lane-type>string</lane-type> <direction>string</direction> </affected-lanes> </travel-lanes> <off-hwy-lanes> <affected-lanes> <lane-id>string</lane-id> <lane-type>string</lane-type> <direction>string</direction> </affected-lanes> </off-hwy-lanes> <schedule> <project-schedule> <start-date-time>string</start-date-time> <end-date-time>string</end-date-time> </project-schedule> </schedule> <info-url>string</info-url> <files> <url>string</url> <file-description>string</file-description> </files> </incidents> </IncdIncidents>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Incidents not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Incidents/Metadata:
    get:
      tags:
        - Inc
      summary: 'Metadata: All Incidents'
      description: Returns an inventory of the Incident event types and event subtypes.
      operationId: Inc_GetIncdMetadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncdMetadata'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                incident-metadata-items:
                  event-types:
                    - id: string
                      name: string
                  event-subtypes:
                    - id: string
                      name: string
            text/json:
              schema:
                $ref: '#/components/schemas/IncdMetadata'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                incident-metadata-items:
                  event-types:
                    - id: string
                      name: string
                  event-subtypes:
                    - id: string
                      name: string
            application/xml:
              schema:
                $ref: '#/components/schemas/IncdMetadata'
              example: <IncdMetadata> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <incident-metadata-items> <event-types> <id>string</id> <name>string</name> </event-types> <event-subtypes> <id>string</id> <name>string</name> </event-subtypes> </incident-metadata-items> </IncdMetadata>
            text/xml:
              schema:
                $ref: '#/components/schemas/IncdMetadata'
              example: <IncdMetadata> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <incident-metadata-items> <event-types> <id>string</id> <name>string</name> </event-types> <event-subtypes> <id>string</id> <name>string</name> </event-subtypes> </incident-metadata-items> </IncdMetadata>
        '404':
          description: Incident Metadata not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /MFParking:
    get:
      tags:
        - Mfp
      summary: Multnomah Falls Parking
      description: Parking lot occupancy and Gate closure data for the Multnomah Falls parking lot at Exit 31 of I-84.
      operationId: Mfp_GetMFparking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFParking'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                parkingLots:
                  parkingLotCalculation:
                    last-update-time: string
                    location:
                      locationName: string
                      latitude: 0
                      longitude: 0
                    percentFull: 0
                    percentFullMessage: string
                  parkingLotDataArray:
                    - LOT_SUM_ID: 0
                      LOT_CAP_PCT_NO: 0
                      GATE_STAT_CLOSE_THRSHLD_NO: 0
                      GATE_STAT_OPEN_THRSHLD_NO: 0
                      CAR_CNT_DAY_NO: 0
                      CUR_CAR_CNT_NO: 0
                      GATE_SYS_STAT_NO: 0
                      BLK_OUT_SIGN_POS_NO: 0
                      GATE_1_ALM_NO: 0
                      GATE_2_ALM_NO: 0
                      GATE_3_ALM_NO: 0
                      GATE_4_ALM_NO: 0
                      BOS_1_STAT_ALM_NO: 0
                      BOS_2_STAT_ALM_NO: 0
                      BOS_3_STAT_ALM_NO: 0
                      BOS_4_STAT_ALM_NO: 0
                      GATE_1_STAT_POS_NO: 0
                      GATE_2_STAT_POS_NO: 0
                      GATE_3_STAT_POS_NO: 0
                      GATE_4_STAT_POS_NO: 0
                      GATE_1_DTCTR_FAIL_ALM_NO: 0
                      GATE_2_DTCTR_FAIL_ALM_NO: 0
                      GATE_3_DTCTR_FAIL_ALM_NO: 0
                      GATE_4_DTCTR_FAIL_ALM_NO: 0
                      GATE_1_DTCTR_FAIL_CD_NO: 0
                      GATE_2_DTCTR_FAIL_CD_NO: 0
                      GATE_3_DTCTR_FAIL_CD_NO: 0
                      GATE_4_DTCTR_FAIL_CD_NO: 0
                      MAN_STAT_CD: 0
                      UD_DTTM: string
            text/json:
              schema:
                $ref: '#/components/schemas/MFParking'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                parkingLots:
                  parkingLotCalculation:
                    last-update-time: string
                    location:
                      locationName: string
                      latitude: 0
                      longitude: 0
                    percentFull: 0
                    percentFullMessage: string
                  parkingLotDataArray:
                    - LOT_SUM_ID: 0
                      LOT_CAP_PCT_NO: 0
                      GATE_STAT_CLOSE_THRSHLD_NO: 0
                      GATE_STAT_OPEN_THRSHLD_NO: 0
                      CAR_CNT_DAY_NO: 0
                      CUR_CAR_CNT_NO: 0
                      GATE_SYS_STAT_NO: 0
                      BLK_OUT_SIGN_POS_NO: 0
                      GATE_1_ALM_NO: 0
                      GATE_2_ALM_NO: 0
                      GATE_3_ALM_NO: 0
                      GATE_4_ALM_NO: 0
                      BOS_1_STAT_ALM_NO: 0
                      BOS_2_STAT_ALM_NO: 0
                      BOS_3_STAT_ALM_NO: 0
                      BOS_4_STAT_ALM_NO: 0
                      GATE_1_STAT_POS_NO: 0
                      GATE_2_STAT_POS_NO: 0
                      GATE_3_STAT_POS_NO: 0
                      GATE_4_STAT_POS_NO: 0
                      GATE_1_DTCTR_FAIL_ALM_NO: 0
                      GATE_2_DTCTR_FAIL_ALM_NO: 0
                      GATE_3_DTCTR_FAIL_ALM_NO: 0
                      GATE_4_DTCTR_FAIL_ALM_NO: 0
                      GATE_1_DTCTR_FAIL_CD_NO: 0
                      GATE_2_DTCTR_FAIL_CD_NO: 0
                      GATE_3_DTCTR_FAIL_CD_NO: 0
                      GATE_4_DTCTR_FAIL_CD_NO: 0
                      MAN_STAT_CD: 0
                      UD_DTTM: string
            application/xml:
              schema:
                $ref: '#/components/schemas/MFParking'
              example: <MFParking> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <parkingLots> <parkingLotCalculation> <last-update-time>string</last-update-time> <location> <locationName>string</locationName> <latitude>0</latitude> <longitude>0</longitude> </location> <percentFull>0</percentFull> <percentFullMessage>string</percentFullMessage> </parkingLotCalculation> <parkingLotDataArray> <LOT_SUM_ID>0</LOT_SUM_ID> <LOT_CAP_PCT_NO>0</LOT_CAP_PCT_NO> <GATE_STAT_CLOSE_THRSHLD_NO>0</GATE_STAT_CLOSE_THRSHLD_NO> <GATE_STAT_OPEN_THRSHLD_NO>0</GATE_STAT_OPEN_THRSHLD_NO> <CAR_CNT_DAY_NO>0</CAR_CNT_DAY_NO> <CUR_CAR_CNT_NO>0</CUR_CAR_CNT_NO> <GATE_SYS_STAT_NO>0</GATE_SYS_STAT_NO> <BLK_OUT_SIGN_POS_NO>0</BLK_OUT_SIGN_POS_NO> <GATE_1_ALM_NO>0</GATE_1_ALM_NO> <GATE_2_ALM_NO>0</GATE_2_ALM_NO> <GATE_3_ALM_NO>0</GATE_3_ALM_NO> <GATE_4_ALM_NO>0</GATE_4_ALM_NO> <BOS_1_STAT_ALM_NO>0</BOS_1_STAT_ALM_NO> <BOS_2_STAT_ALM_NO>0</BOS_2_STAT_ALM_NO> <BOS_3_STAT_ALM_NO>0</BOS_3_STAT_ALM_NO> <BOS_4_STAT_ALM_NO>0</BOS_4_STAT_ALM_NO> <GATE_1_STAT_POS_NO>0</GATE_1_STAT_POS_NO> <GATE_2_STAT_POS_NO>0</GATE_2_STAT_POS_NO> <GATE_3_STAT_POS_NO>0</GATE_3_STAT_POS_NO> <GATE_4_STAT_POS_NO>0</GATE_4_STAT_POS_NO> <GATE_1_DTCTR_FAIL_ALM_NO>0</GATE_1_DTCTR_FAIL_ALM_NO> <GATE_2_DTCTR_FAIL_ALM_NO>0</GATE_2_DTCTR_FAIL_ALM_NO> <GATE_3_DTCTR_FAIL_ALM_NO>0</GATE_3_DTCTR_FAIL_ALM_NO> <GATE_4_DTCTR_FAIL_ALM_NO>0</GATE_4_DTCTR_FAIL_ALM_NO> <GATE_1_DTCTR_FAIL_CD_NO>0</GATE_1_DTCTR_FAIL_CD_NO> <GATE_2_DTCTR_FAIL_CD_NO>0</GATE_2_DTCTR_FAIL_CD_NO> <GATE_3_DTCTR_FAIL_CD_NO>0</GATE_3_DTCTR_FAIL_CD_NO> <GATE_4_DTCTR_FAIL_CD_NO>0</GATE_4_DTCTR_FAIL_CD_NO> <MAN_STAT_CD>0</MAN_STAT_CD> <UD_DTTM>string</UD_DTTM> </parkingLotDataArray> </parkingLots> </MFParking>
            text/xml:
              schema:
                $ref: '#/components/schemas/MFParking'
              example: <MFParking> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <parkingLots> <parkingLotCalculation> <last-update-time>string</last-update-time> <location> <locationName>string</locationName> <latitude>0</latitude> <longitude>0</longitude> </location> <percentFull>0</percentFull> <percentFullMessage>string</percentFullMessage> </parkingLotCalculation> <parkingLotDataArray> <LOT_SUM_ID>0</LOT_SUM_ID> <LOT_CAP_PCT_NO>0</LOT_CAP_PCT_NO> <GATE_STAT_CLOSE_THRSHLD_NO>0</GATE_STAT_CLOSE_THRSHLD_NO> <GATE_STAT_OPEN_THRSHLD_NO>0</GATE_STAT_OPEN_THRSHLD_NO> <CAR_CNT_DAY_NO>0</CAR_CNT_DAY_NO> <CUR_CAR_CNT_NO>0</CUR_CAR_CNT_NO> <GATE_SYS_STAT_NO>0</GATE_SYS_STAT_NO> <BLK_OUT_SIGN_POS_NO>0</BLK_OUT_SIGN_POS_NO> <GATE_1_ALM_NO>0</GATE_1_ALM_NO> <GATE_2_ALM_NO>0</GATE_2_ALM_NO> <GATE_3_ALM_NO>0</GATE_3_ALM_NO> <GATE_4_ALM_NO>0</GATE_4_ALM_NO> <BOS_1_STAT_ALM_NO>0</BOS_1_STAT_ALM_NO> <BOS_2_STAT_ALM_NO>0</BOS_2_STAT_ALM_NO> <BOS_3_STAT_ALM_NO>0</BOS_3_STAT_ALM_NO> <BOS_4_STAT_ALM_NO>0</BOS_4_STAT_ALM_NO> <GATE_1_STAT_POS_NO>0</GATE_1_STAT_POS_NO> <GATE_2_STAT_POS_NO>0</GATE_2_STAT_POS_NO> <GATE_3_STAT_POS_NO>0</GATE_3_STAT_POS_NO> <GATE_4_STAT_POS_NO>0</GATE_4_STAT_POS_NO> <GATE_1_DTCTR_FAIL_ALM_NO>0</GATE_1_DTCTR_FAIL_ALM_NO> <GATE_2_DTCTR_FAIL_ALM_NO>0</GATE_2_DTCTR_FAIL_ALM_NO> <GATE_3_DTCTR_FAIL_ALM_NO>0</GATE_3_DTCTR_FAIL_ALM_NO> <GATE_4_DTCTR_FAIL_ALM_NO>0</GATE_4_DTCTR_FAIL_ALM_NO> <GATE_1_DTCTR_FAIL_CD_NO>0</GATE_1_DTCTR_FAIL_CD_NO> <GATE_2_DTCTR_FAIL_CD_NO>0</GATE_2_DTCTR_FAIL_CD_NO> <GATE_3_DTCTR_FAIL_CD_NO>0</GATE_3_DTCTR_FAIL_CD_NO> <GATE_4_DTCTR_FAIL_CD_NO>0</GATE_4_DTCTR_FAIL_CD_NO> <MAN_STAT_CD>0</MAN_STAT_CD> <UD_DTTM>string</UD_DTTM> </parkingLotDataArray> </parkingLots> </MFParking>
        '404':
          description: Mulnomah Falls parking data not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '500':
          description: Internal error
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Routes:
    get:
      tags:
        - Routes
      summary: 'Metadata: Routes'
      description: Returns a list of route names currently in the system.
      operationId: Routes_GetRoutes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routes'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                location-list:
                  - string
            text/json:
              schema:
                $ref: '#/components/schemas/Routes'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                location-list:
                  - string
            application/xml:
              schema:
                $ref: '#/components/schemas/Routes'
              example: <Routes> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <location-list>string</location-list> </Routes>
            text/xml:
              schema:
                $ref: '#/components/schemas/Routes'
              example: <Routes> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <location-list>string</location-list> </Routes>
        '404':
          description: Routes metadata not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /RW/Reports:
    get:
      tags:
        - RW
      summary: Road and Weather Reports
      description: Current road conditions as reported by ODOT crews. This includes weather observations and tire chain restrictions.
      operationId: RW_GetReportsFilter
      parameters:
        - name: StationId
          in: query
          description: 'Accepts single station-id, or multiple comma delimited station-ids. Ranges optional. Ex. "20, 100-103"'
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited route-ids. Performs a contains search. \r\n            Ex. \"I5,US97,OR\" returns every item on route I5, US97, and OR state routes."
          schema:
            type: string
        - name: RestrictionId
          in: query
          description: 'The driving RestrictionId accepts single restriction-id, or multiple comma delimited restriction-ids. Ex. “B,B1,D”'
          schema:
            type: string
        - name: RoadCondId
          in: query
          description: 'The road-cond-id accepts single road-cond-id, or multiple comma delimited road-cond-id. Ranges optional. Ex. “1,2-6”'
          schema:
            type: string
        - name: WeatherId
          in: query
          description: 'The WeatherId accepts single weather-id, or multiple comma delimited weather-ids. Ranges optional. Ex. “1,9,92-95”'
          schema:
            type: string
        - name: Bounds
          in: query
          description: 'Lon/Lat rectangle bounds to filter:minLon,minLat,maxLon,maxLat Ex. "-122.875228,45.414915,-122.631469,45.559331" is the bounds of Portland, OR'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RWReports'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                road-weather-reports:
                  - station-id: 0
                    entry-time: string
                    expiry-time: string
                    location:
                      location-name: string
                      route-id: string
                      hwy-id: string
                      direction: string
                      start-location:
                        start-lat: 0
                        start-long: 0
                        start-milepost: 0
                      end-location:
                        end-lat: 0
                        end-long: 0
                        end-milepost: 0
                    air-temperature: 0
                    snowfall-accum-rate: 0
                    adjacent-snow-depth: 0
                    weather-conditions:
                      weather-id: 0
                    road-conditions:
                      road-cond-id: 0
                    commercial-vehicle-restriction:
                      restriction-id: 0
                      restriction-type: string
                    driving-restriction:
                      restriction-id: string
                      restriction-start-milepost: 0
                      restriction-end-milepost: 0
                    comments: string
            text/json:
              schema:
                $ref: '#/components/schemas/RWReports'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                road-weather-reports:
                  - station-id: 0
                    entry-time: string
                    expiry-time: string
                    location:
                      location-name: string
                      route-id: string
                      hwy-id: string
                      direction: string
                      start-location:
                        start-lat: 0
                        start-long: 0
                        start-milepost: 0
                      end-location:
                        end-lat: 0
                        end-long: 0
                        end-milepost: 0
                    air-temperature: 0
                    snowfall-accum-rate: 0
                    adjacent-snow-depth: 0
                    weather-conditions:
                      weather-id: 0
                    road-conditions:
                      road-cond-id: 0
                    commercial-vehicle-restriction:
                      restriction-id: 0
                      restriction-type: string
                    driving-restriction:
                      restriction-id: string
                      restriction-start-milepost: 0
                      restriction-end-milepost: 0
                    comments: string
            application/xml:
              schema:
                $ref: '#/components/schemas/RWReports'
              example: <RWReports> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <road-weather-reports> <station-id>0</station-id> <entry-time>string</entry-time> <expiry-time>string</expiry-time> <location> <location-name>string</location-name> <route-id>string</route-id> <hwy-id>string</hwy-id> <direction>string</direction> <start-location> <start-lat>0</start-lat> <start-long>0</start-long> <start-milepost>0</start-milepost> </start-location> <end-location> <end-lat>0</end-lat> <end-long>0</end-long> <end-milepost>0</end-milepost> </end-location> </location> <air-temperature>0</air-temperature> <snowfall-accum-rate>0</snowfall-accum-rate> <adjacent-snow-depth>0</adjacent-snow-depth> <weather-conditions> <weather-id>0</weather-id> </weather-conditions> <road-conditions> <road-cond-id>0</road-cond-id> </road-conditions> <commercial-vehicle-restriction> <restriction-id>0</restriction-id> <restriction-type>string</restriction-type> </commercial-vehicle-restriction> <driving-restriction> <restriction-id>string</restriction-id> <restriction-start-milepost>0</restriction-start-milepost> <restriction-end-milepost>0</restriction-end-milepost> </driving-restriction> <comments>string</comments> </road-weather-reports> </RWReports>
            text/xml:
              schema:
                $ref: '#/components/schemas/RWReports'
              example: <RWReports> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <road-weather-reports> <station-id>0</station-id> <entry-time>string</entry-time> <expiry-time>string</expiry-time> <location> <location-name>string</location-name> <route-id>string</route-id> <hwy-id>string</hwy-id> <direction>string</direction> <start-location> <start-lat>0</start-lat> <start-long>0</start-long> <start-milepost>0</start-milepost> </start-location> <end-location> <end-lat>0</end-lat> <end-long>0</end-long> <end-milepost>0</end-milepost> </end-location> </location> <air-temperature>0</air-temperature> <snowfall-accum-rate>0</snowfall-accum-rate> <adjacent-snow-depth>0</adjacent-snow-depth> <weather-conditions> <weather-id>0</weather-id> </weather-conditions> <road-conditions> <road-cond-id>0</road-cond-id> </road-conditions> <commercial-vehicle-restriction> <restriction-id>0</restriction-id> <restriction-type>string</restriction-type> </commercial-vehicle-restriction> <driving-restriction> <restriction-id>string</restriction-id> <restriction-start-milepost>0</restriction-start-milepost> <restriction-end-milepost>0</restriction-end-milepost> </driving-restriction> <comments>string</comments> </road-weather-reports> </RWReports>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Road and Weather Reports not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /RW/Metadata:
    get:
      tags:
        - RW
      summary: 'Metadata: Road and Weather'
      description: Returns an inventory of the enumerated values that are held within the TripCheck API Road and Weather datafeed.
      operationId: RW_GetMetadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RWMetadata'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                road-weather-items:
                  weather-condition-list:
                    - weather-id: 0
                      weather-desc: string
                  road-condition-list:
                    - road-cond-id: 0
                      road-cond-desc: string
                  commercial-vehicle-restriction-list:
                    - restriction-id: 0
                      restriction-desc: string
                      restriction-type: string
                  driving-restriction-list:
                    - restriction-id: string
                      restriction-desc: string
            text/json:
              schema:
                $ref: '#/components/schemas/RWMetadata'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                road-weather-items:
                  weather-condition-list:
                    - weather-id: 0
                      weather-desc: string
                  road-condition-list:
                    - road-cond-id: 0
                      road-cond-desc: string
                  commercial-vehicle-restriction-list:
                    - restriction-id: 0
                      restriction-desc: string
                      restriction-type: string
                  driving-restriction-list:
                    - restriction-id: string
                      restriction-desc: string
            application/xml:
              schema:
                $ref: '#/components/schemas/RWMetadata'
              example: <RWMetadata> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <road-weather-items> <weather-condition-list> <weather-id>0</weather-id> <weather-desc>string</weather-desc> </weather-condition-list> <road-condition-list> <road-cond-id>0</road-cond-id> <road-cond-desc>string</road-cond-desc> </road-condition-list> <commercial-vehicle-restriction-list> <restriction-id>0</restriction-id> <restriction-desc>string</restriction-desc> <restriction-type>string</restriction-type> </commercial-vehicle-restriction-list> <driving-restriction-list> <restriction-id>string</restriction-id> <restriction-desc>string</restriction-desc> </driving-restriction-list> </road-weather-items> </RWMetadata>
            text/xml:
              schema:
                $ref: '#/components/schemas/RWMetadata'
              example: <RWMetadata> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <road-weather-items> <weather-condition-list> <weather-id>0</weather-id> <weather-desc>string</weather-desc> </weather-condition-list> <road-condition-list> <road-cond-id>0</road-cond-id> <road-cond-desc>string</road-cond-desc> </road-condition-list> <commercial-vehicle-restriction-list> <restriction-id>0</restriction-id> <restriction-desc>string</restriction-desc> <restriction-type>string</restriction-type> </commercial-vehicle-restriction-list> <driving-restriction-list> <restriction-id>string</restriction-id> <restriction-desc>string</restriction-desc> </driving-restriction-list> </road-weather-items> </RWMetadata>
        '404':
          description: Incident Metadata not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Rwis/Inventory:
    get:
      tags:
        - Rwis
      summary: RWIS Inventory (legacy)
      description: Name and location of all the Weather Stations along state highways and what each station can measure.
      operationId: Rwis_GetInventoryFilter
      parameters:
        - name: StationId
          in: query
          description: "Accepts single station-id, or multiple comma delimited\r\n            station-ids. Ranges optional. Ex. \"24008, 24001-24004\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes. Depends on ~\\AppData\\RoutesMetadata.xml"
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                ess-site-list:
                  - station-id: 0
                    station-name: string
                    device-update-time: string
                    latitude: 0
                    longitude: 0
                    elevation: 0
                    route-id: string
                    milepoint: 0
                    ess-inventory-list:
                      - device-id: 0
                        device-name: string
                        device-description: string
            text/json:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                ess-site-list:
                  - station-id: 0
                    station-name: string
                    device-update-time: string
                    latitude: 0
                    longitude: 0
                    elevation: 0
                    route-id: string
                    milepoint: 0
                    ess-inventory-list:
                      - device-id: 0
                        device-name: string
                        device-description: string
            application/xml:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example: <RwisInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <ess-site-list> <station-id>0</station-id> <station-name>string</station-name> <device-update-time>string</device-update-time> <latitude>0</latitude> <longitude>0</longitude> <elevation>0</elevation> <route-id>string</route-id> <milepoint>0</milepoint> <ess-inventory-list> <device-id>0</device-id> <device-name>string</device-name> <device-description>string</device-description> </ess-inventory-list> </ess-site-list> </RwisInventory>
            text/xml:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example: <RwisInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <ess-site-list> <station-id>0</station-id> <station-name>string</station-name> <device-update-time>string</device-update-time> <latitude>0</latitude> <longitude>0</longitude> <elevation>0</elevation> <route-id>string</route-id> <milepoint>0</milepoint> <ess-inventory-list> <device-id>0</device-id> <device-name>string</device-name> <device-description>string</device-description> </ess-inventory-list> </ess-site-list> </RwisInventory>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: RWIS inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Rwis/Status:
    get:
      tags:
        - Rwis
      summary: RWIS Status (legacy)
      description: "Weather data from automated Weather stations along state highways \r\n(e.g. Air Temperature, Surface Temperature, wind speed, etc.) \r\nNote: not all stations can measure all types of weather factors."
      operationId: Rwis_GetStatusFilter
      parameters:
        - name: StationId
          in: query
          description: "Accepts single station-id, or multiple comma delimited\r\n            station-ids. Ranges optional. Ex. \"24008, 24001-24004\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes."
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RwisStatus'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                WeatherStations:
                  - station-id: 0
                    RoadWeather:
                      air-temperature: 0
                      atmospheric-pressure: 0
                      avg-wind-direction: 0
                      avg-wind-gust-direction: 0
                      avg-wind-gust-speed: 0
                      avg-wind-speed: 0
                      dewpoint-temp: 0
                      last-update-time: string
                      max-temp: 0
                      min-temp: 0
                      precip-intensity: string
                      precip-rate: 0
                      precip-type: string
                      relative-humidity: 0
                      visibility: 0
                    SurfaceCondition:
                      ice-thickness: 0
                      mobile-friction: 0
                      surface-freeze-point: 0
                      surface-salinity: 0
                      surface-temperatures:
                        - sensor-id: 0
                          surface-temperature: 0
                      surface-water-depth: 0
                      water-depth: 0
            text/json:
              schema:
                $ref: '#/components/schemas/RwisStatus'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                WeatherStations:
                  - station-id: 0
                    RoadWeather:
                      air-temperature: 0
                      atmospheric-pressure: 0
                      avg-wind-direction: 0
                      avg-wind-gust-direction: 0
                      avg-wind-gust-speed: 0
                      avg-wind-speed: 0
                      dewpoint-temp: 0
                      last-update-time: string
                      max-temp: 0
                      min-temp: 0
                      precip-intensity: string
                      precip-rate: 0
                      precip-type: string
                      relative-humidity: 0
                      visibility: 0
                    SurfaceCondition:
                      ice-thickness: 0
                      mobile-friction: 0
                      surface-freeze-point: 0
                      surface-salinity: 0
                      surface-temperatures:
                        - sensor-id: 0
                          surface-temperature: 0
                      surface-water-depth: 0
                      water-depth: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/RwisStatus'
              example: <RwisStatus> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <WeatherStations> <station-id>0</station-id> <RoadWeather> <air-temperature>0</air-temperature> <atmospheric-pressure>0</atmospheric-pressure> <avg-wind-direction>0</avg-wind-direction> <avg-wind-gust-direction>0</avg-wind-gust-direction> <avg-wind-gust-speed>0</avg-wind-gust-speed> <avg-wind-speed>0</avg-wind-speed> <dewpoint-temp>0</dewpoint-temp> <last-update-time>string</last-update-time> <max-temp>0</max-temp> <min-temp>0</min-temp> <precip-intensity>string</precip-intensity> <precip-rate>0</precip-rate> <precip-type>string</precip-type> <relative-humidity>0</relative-humidity> <visibility>0</visibility> </RoadWeather> <SurfaceCondition> <ice-thickness>0</ice-thickness> <mobile-friction>0</mobile-friction> <surface-freeze-point>0</surface-freeze-point> <surface-salinity>0</surface-salinity> <surface-temperatures> <sensor-id>0</sensor-id> <surface-temperature>0</surface-temperature> </surface-temperatures> <surface-water-depth>0</surface-water-depth> <water-depth>0</water-depth> </SurfaceCondition> </WeatherStations> </RwisStatus>
            text/xml:
              schema:
                $ref: '#/components/schemas/RwisStatus'
              example: <RwisStatus> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <WeatherStations> <station-id>0</station-id> <RoadWeather> <air-temperature>0</air-temperature> <atmospheric-pressure>0</atmospheric-pressure> <avg-wind-direction>0</avg-wind-direction> <avg-wind-gust-direction>0</avg-wind-gust-direction> <avg-wind-gust-speed>0</avg-wind-gust-speed> <avg-wind-speed>0</avg-wind-speed> <dewpoint-temp>0</dewpoint-temp> <last-update-time>string</last-update-time> <max-temp>0</max-temp> <min-temp>0</min-temp> <precip-intensity>string</precip-intensity> <precip-rate>0</precip-rate> <precip-type>string</precip-type> <relative-humidity>0</relative-humidity> <visibility>0</visibility> </RoadWeather> <SurfaceCondition> <ice-thickness>0</ice-thickness> <mobile-friction>0</mobile-friction> <surface-freeze-point>0</surface-freeze-point> <surface-salinity>0</surface-salinity> <surface-temperatures> <sensor-id>0</sensor-id> <surface-temperature>0</surface-temperature> </surface-temperatures> <surface-water-depth>0</surface-water-depth> <water-depth>0</water-depth> </SurfaceCondition> </WeatherStations> </RwisStatus>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: RWIS status not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /TrafficDetector/Inventory:
    get:
      tags:
        - TD
      summary: Traffic Detector Inventory Data
      description: Name and location of traffic detector stations and highway ramps associated with them.
      operationId: TD_GetInventoryFilter
      parameters:
        - name: JurisdictionId
          in: query
          description: 'Accepts single jurisdiction-ids, or multiple comma delimited jurisdiction-ids. Ex. “1,2”'
          schema:
            type: string
        - name: LocationId
          in: query
          description: 'Accepts a single location-id of the station, or multiple comma delimited location-ids for multiple stations. Ex. “47,48,49”'
          schema:
            type: string
        - name: HighwayName
          in: query
          description: "Accepts a single station location highway-name, or multiple comma delimited station location highway-names. \r\n            Performs a contains search. Ex. \" I-205, OR-217, US \" returns every item on route I-205, OR-217, US state routes."
          schema:
            type: string
        - name: Milepoint
          in: query
          description: "Accepts single station location milepoints. Most useful when also inputting a highway-name parameter. Ranges optional. \r\n            Ex. “100-300” Ex. “6.77”"
          schema:
            type: string
        - name: StationId
          in: query
          description: 'Accepts single station-id, or multiple comma delimited station-ids. Ranges optional. Ex. "20, 100-103"'
          schema:
            type: string
        - name: StationClass
          in: query
          description: "Accepts single station-classes, or multiple comma delimited station-classes. Performs a contains search. \r\n            Ex. \"MAINLINE, HOV\" returns every item with class ‘MAINLINE’ and ‘HOV’"
          schema:
            type: string
        - name: RampId
          in: query
          description: 'Accepts single ramp-ids, or multiple comma delimited ramp-ids. Ex. “10066, 10067”'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TDInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                traffic-detector-list:
                  - location:
                      highway-name: string
                      location-name: string
                      location-id: 0
                      latitude: 0
                      longitude: 0
                      milepoint: 0
                      highway-direction: string
                    detector-station:
                      station-id: 0
                      jurisdiction-id: 0
                      item-code: string
                      station-lanes: 0
                      station-class: string
                      controller-description: string
                      roadway-detector-list:
                        - detector-id: 0
                          detector-title: string
                          lane: 0
                      ramp-list:
                        - ramp-id: 0
                          location-id: 0
                          ramp-lanes: 0
            text/json:
              schema:
                $ref: '#/components/schemas/TDInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                traffic-detector-list:
                  - location:
                      highway-name: string
                      location-name: string
                      location-id: 0
                      latitude: 0
                      longitude: 0
                      milepoint: 0
                      highway-direction: string
                    detector-station:
                      station-id: 0
                      jurisdiction-id: 0
                      item-code: string
                      station-lanes: 0
                      station-class: string
                      controller-description: string
                      roadway-detector-list:
                        - detector-id: 0
                          detector-title: string
                          lane: 0
                      ramp-list:
                        - ramp-id: 0
                          location-id: 0
                          ramp-lanes: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/TDInventory'
              example: <TDInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <traffic-detector-list> <location> <highway-name>string</highway-name> <location-name>string</location-name> <location-id>0</location-id> <latitude>0</latitude> <longitude>0</longitude> <milepoint>0</milepoint> <highway-direction>string</highway-direction> </location> <detector-station> <station-id>0</station-id> <jurisdiction-id>0</jurisdiction-id> <item-code>string</item-code> <station-lanes>0</station-lanes> <station-class>string</station-class> <controller-description>string</controller-description> <roadway-detector-list> <detector-id>0</detector-id> <detector-title>string</detector-title> <lane>0</lane> </roadway-detector-list> <ramp-list> <ramp-id>0</ramp-id> <location-id>0</location-id> <ramp-lanes>0</ramp-lanes> </ramp-list> </detector-station> </traffic-detector-list> </TDInventory>
            text/xml:
              schema:
                $ref: '#/components/schemas/TDInventory'
              example: <TDInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <traffic-detector-list> <location> <highway-name>string</highway-name> <location-name>string</location-name> <location-id>0</location-id> <latitude>0</latitude> <longitude>0</longitude> <milepoint>0</milepoint> <highway-direction>string</highway-direction> </location> <detector-station> <station-id>0</station-id> <jurisdiction-id>0</jurisdiction-id> <item-code>string</item-code> <station-lanes>0</station-lanes> <station-class>string</station-class> <controller-description>string</controller-description> <roadway-detector-list> <detector-id>0</detector-id> <detector-title>string</detector-title> <lane>0</lane> </roadway-detector-list> <ramp-list> <ramp-id>0</ramp-id> <location-id>0</location-id> <ramp-lanes>0</ramp-lanes> </ramp-list> </detector-station> </traffic-detector-list> </TDInventory>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Traffic Detector inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /TrafficDetector/Roadway:
    get:
      tags:
        - TD
      summary: Traffic Detector Roadway Data
      description: 'Roadway traffic detectors collecting volume, occupancy and speed data from select roadways located in Oregon'
      operationId: TD_GetRoadwayDataFilter
      parameters:
        - name: JurisdictionId
          in: query
          description: 'Accepts single jurisdiction-ids, or multiple comma delimited jurisdiction-ids. Ex. “1,2”'
          schema:
            type: string
        - name: LocationId
          in: query
          description: 'Accepts a single location-id of the station, or multiple comma delimited location-ids for multiple stations. Ex. “47,48,49”'
          schema:
            type: string
        - name: HighwayName
          in: query
          description: "Accepts a single station location highway-name, or multiple comma delimited station location highway-names. \r\n            Performs a contains search. Ex. \" I-205, OR-217, US \" returns every item on route I-205, OR-217, US state routes."
          schema:
            type: string
        - name: Milepoint
          in: query
          description: "Accepts single station location milepoints. Most useful when also inputting a highway-name parameter. Ranges optional. \r\n            Ex. “100-300” Ex. “6.77”"
          schema:
            type: string
        - name: StationId
          in: query
          description: 'Accepts single station-id, or multiple comma delimited station-ids. Ranges optional. Ex. "20, 100-103"'
          schema:
            type: string
        - name: StationClass
          in: query
          description: "Accepts single station-classes, or multiple comma delimited station-classes. Performs a contains search. \r\n            Ex. \"MAINLINE, HOV\" returns every item with class ‘MAINLINE’ and ‘HOV’"
          schema:
            type: string
        - name: RampId
          in: query
          description: 'Accepts single ramp-ids, or multiple comma delimited ramp-ids. Ex. “10066, 10067”'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TDRoadwayData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                detector-data-items:
                  - detector-list:
                      detector-data-detail:
                        station-id: 0
                        detector-id: 0
                        lane: 0
                        detection-time-stamp: string
                        vehicle-count: 0
                        vehicle-occupancy: 0
                        detector-reliability: 0
                        vehicle-speed: 0
            text/json:
              schema:
                $ref: '#/components/schemas/TDRoadwayData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                detector-data-items:
                  - detector-list:
                      detector-data-detail:
                        station-id: 0
                        detector-id: 0
                        lane: 0
                        detection-time-stamp: string
                        vehicle-count: 0
                        vehicle-occupancy: 0
                        detector-reliability: 0
                        vehicle-speed: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/TDRoadwayData'
              example: <TDRoadwayData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <detector-data-items> <detector-list> <detector-data-detail> <station-id>0</station-id> <detector-id>0</detector-id> <lane>0</lane> <detection-time-stamp>string</detection-time-stamp> <vehicle-count>0</vehicle-count> <vehicle-occupancy>0</vehicle-occupancy> <detector-reliability>0</detector-reliability> <vehicle-speed>0</vehicle-speed> </detector-data-detail> </detector-list> </detector-data-items> </TDRoadwayData>
            text/xml:
              schema:
                $ref: '#/components/schemas/TDRoadwayData'
              example: <TDRoadwayData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <detector-data-items> <detector-list> <detector-data-detail> <station-id>0</station-id> <detector-id>0</detector-id> <lane>0</lane> <detection-time-stamp>string</detection-time-stamp> <vehicle-count>0</vehicle-count> <vehicle-occupancy>0</vehicle-occupancy> <detector-reliability>0</detector-reliability> <vehicle-speed>0</vehicle-speed> </detector-data-detail> </detector-list> </detector-data-items> </TDRoadwayData>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Traffic Detector inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /TrafficDetector/Ramp:
    get:
      tags:
        - TD
      summary: Traffic Detector Ramp Data
      description: 'Highway ramp data such as ramp occupancy, volume, and metering rate collected by ODOT Central Ramp Metering System for select ramps located in Oregon'
      operationId: TD_GetRampDataFilter
      parameters:
        - name: JurisdictionId
          in: query
          description: 'Accepts single jurisdiction-ids, or multiple comma delimited jurisdiction-ids. Ex. “1,2”'
          schema:
            type: string
        - name: LocationId
          in: query
          description: 'Accepts a single location-id of the station, or multiple comma delimited location-ids for multiple stations. Ex. “47,48,49”'
          schema:
            type: string
        - name: HighwayName
          in: query
          description: "Accepts a single station location highway-name, or multiple comma delimited station location highway-names. \r\n            Performs a contains search. Ex. \" I-205, OR-217, US \" returns every item on route I-205, OR-217, US state routes."
          schema:
            type: string
        - name: Milepoint
          in: query
          description: "Accepts single station location milepoints. Most useful when also inputting a highway-name parameter. Ranges optional. \r\n            Ex. “100-300” Ex. “6.77”"
          schema:
            type: string
        - name: StationId
          in: query
          description: 'Accepts single station-id, or multiple comma delimited station-ids. Ranges optional. Ex. "20, 100-103"'
          schema:
            type: string
        - name: StationClass
          in: query
          description: "Accepts single station-classes, or multiple comma delimited station-classes. Performs a contains search. \r\n            Ex. \"MAINLINE, HOV\" returns every item with class ‘MAINLINE’ and ‘HOV’"
          schema:
            type: string
        - name: RampId
          in: query
          description: 'Accepts single ramp-ids, or multiple comma delimited ramp-ids. Ex. “10066, 10067”'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TDRampData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                ramp-meter-status-items:
                  - device-status-header:
                      ramp-id: 0
                      device-status: string
                      center-id: 0
                      response-plan-id: 0
                      last-comm-time: string
                    metered-lane-list:
                      - metered-lane:
                          meter-implemented-action: 0
                          implemented-meter-command-source: 0
                          meter-implemented-plan: 0
                          meter-implemented-rate: 0
                          meter-implemented-vehicles-per-green: 0
                          meter-requested-action: 0
                          meter-requested-plan: 0
                          meter-requested-rate: 0
                          meter-requested-vehicles-per-green: 0
                          metered-lane-vehicle-count: 0
                    mainline-flow-rate: 0
                    mainline-vehicle-occupancy: 0
                    mainline-vehicle-speed: 0
            text/json:
              schema:
                $ref: '#/components/schemas/TDRampData'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                ramp-meter-status-items:
                  - device-status-header:
                      ramp-id: 0
                      device-status: string
                      center-id: 0
                      response-plan-id: 0
                      last-comm-time: string
                    metered-lane-list:
                      - metered-lane:
                          meter-implemented-action: 0
                          implemented-meter-command-source: 0
                          meter-implemented-plan: 0
                          meter-implemented-rate: 0
                          meter-implemented-vehicles-per-green: 0
                          meter-requested-action: 0
                          meter-requested-plan: 0
                          meter-requested-rate: 0
                          meter-requested-vehicles-per-green: 0
                          metered-lane-vehicle-count: 0
                    mainline-flow-rate: 0
                    mainline-vehicle-occupancy: 0
                    mainline-vehicle-speed: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/TDRampData'
              example: <TDRampData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <ramp-meter-status-items> <device-status-header> <ramp-id>0</ramp-id> <device-status>string</device-status> <center-id>0</center-id> <response-plan-id>0</response-plan-id> <last-comm-time>string</last-comm-time> </device-status-header> <metered-lane-list> <metered-lane> <meter-implemented-action>0</meter-implemented-action> <implemented-meter-command-source>0</implemented-meter-command-source> <meter-implemented-plan>0</meter-implemented-plan> <meter-implemented-rate>0</meter-implemented-rate> <meter-implemented-vehicles-per-green>0</meter-implemented-vehicles-per-green> <meter-requested-action>0</meter-requested-action> <meter-requested-plan>0</meter-requested-plan> <meter-requested-rate>0</meter-requested-rate> <meter-requested-vehicles-per-green>0</meter-requested-vehicles-per-green> <metered-lane-vehicle-count>0</metered-lane-vehicle-count> </metered-lane> </metered-lane-list> <mainline-flow-rate>0</mainline-flow-rate> <mainline-vehicle-occupancy>0</mainline-vehicle-occupancy> <mainline-vehicle-speed>0</mainline-vehicle-speed> </ramp-meter-status-items> </TDRampData>
            text/xml:
              schema:
                $ref: '#/components/schemas/TDRampData'
              example: <TDRampData> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <ramp-meter-status-items> <device-status-header> <ramp-id>0</ramp-id> <device-status>string</device-status> <center-id>0</center-id> <response-plan-id>0</response-plan-id> <last-comm-time>string</last-comm-time> </device-status-header> <metered-lane-list> <metered-lane> <meter-implemented-action>0</meter-implemented-action> <implemented-meter-command-source>0</implemented-meter-command-source> <meter-implemented-plan>0</meter-implemented-plan> <meter-implemented-rate>0</meter-implemented-rate> <meter-implemented-vehicles-per-green>0</meter-implemented-vehicles-per-green> <meter-requested-action>0</meter-requested-action> <meter-requested-plan>0</meter-requested-plan> <meter-requested-rate>0</meter-requested-rate> <meter-requested-vehicles-per-green>0</meter-requested-vehicles-per-green> <metered-lane-vehicle-count>0</metered-lane-vehicle-count> </metered-lane> </metered-lane-list> <mainline-flow-rate>0</mainline-flow-rate> <mainline-vehicle-occupancy>0</mainline-vehicle-occupancy> <mainline-vehicle-speed>0</mainline-vehicle-speed> </ramp-meter-status-items> </TDRampData>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Traffic Detector inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Tle/Events:
    get:
      tags:
        - Tle
      summary: Local Incidents
      description: 'Events occurring on local and county roads as reported by non-ODOT government agencies (ex., Washington County, City of Eugene Public Works).'
      operationId: Tle_GetLocalEventsByFilter
      parameters:
        - name: Id
          in: query
          description: "Accepts single event Id, or multiple comma delimited Ids.\r\n            Ranges optional. Ex. \"209,223-229\""
          schema:
            type: string
        - name: TypeId
          in: query
          description: 'Accepts single event type identifiers, or multiple comma delimited type ids. Enumerations held within the Metadata: All Incident feed. Ex. "1,2,3"'
          schema:
            type: string
        - name: ImpactId
          in: query
          description: 'Accepts single impact identifiers, or multiple comma delimited impact ids. Enumerations held within the Metadata: All Incident feed. Ex. "1,2,3"'
          schema:
            type: string
        - name: SourceAgency
          in: query
          description: The local agency responsible for the local incident
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalEvents'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                Incidents:
                  - Id: 0
                    LocationDescription: string
                    Type: string
                    Impact: string
                    Headline: string
                    Comments: string
                    CreateTime: string
                    EventStart: string
                    EventEnd: string
                    StartLat: 0
                    StartLong: 0
                    EndLat: 0
                    EndLong: 0
                    GeometryWkt: string
                    SourceAgency: string
                    ContactEmail: string
                    ContactName: string
                    ContactOrganization: string
                    ContactPhone: string
                    Direction: string
                    UpdateTime: string
            text/json:
              schema:
                $ref: '#/components/schemas/LocalEvents'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                Incidents:
                  - Id: 0
                    LocationDescription: string
                    Type: string
                    Impact: string
                    Headline: string
                    Comments: string
                    CreateTime: string
                    EventStart: string
                    EventEnd: string
                    StartLat: 0
                    StartLong: 0
                    EndLat: 0
                    EndLong: 0
                    GeometryWkt: string
                    SourceAgency: string
                    ContactEmail: string
                    ContactName: string
                    ContactOrganization: string
                    ContactPhone: string
                    Direction: string
                    UpdateTime: string
            application/xml:
              schema:
                $ref: '#/components/schemas/LocalEvents'
              example: <LocalEvents> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <Incidents> <Id>0</Id> <LocationDescription>string</LocationDescription> <Type>string</Type> <Impact>string</Impact> <Headline>string</Headline> <Comments>string</Comments> <CreateTime>string</CreateTime> <EventStart>string</EventStart> <EventEnd>string</EventEnd> <StartLat>0</StartLat> <StartLong>0</StartLong> <EndLat>0</EndLat> <EndLong>0</EndLong> <GeometryWkt>string</GeometryWkt> <SourceAgency>string</SourceAgency> <ContactEmail>string</ContactEmail> <ContactName>string</ContactName> <ContactOrganization>string</ContactOrganization> <ContactPhone>string</ContactPhone> <Direction>string</Direction> <UpdateTime>string</UpdateTime> </Incidents> </LocalEvents>
            text/xml:
              schema:
                $ref: '#/components/schemas/LocalEvents'
              example: <LocalEvents> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <Incidents> <Id>0</Id> <LocationDescription>string</LocationDescription> <Type>string</Type> <Impact>string</Impact> <Headline>string</Headline> <Comments>string</Comments> <CreateTime>string</CreateTime> <EventStart>string</EventStart> <EventEnd>string</EventEnd> <StartLat>0</StartLat> <StartLong>0</StartLong> <EndLat>0</EndLat> <EndLong>0</EndLong> <GeometryWkt>string</GeometryWkt> <SourceAgency>string</SourceAgency> <ContactEmail>string</ContactEmail> <ContactName>string</ContactName> <ContactOrganization>string</ContactOrganization> <ContactPhone>string</ContactPhone> <Direction>string</Direction> <UpdateTime>string</UpdateTime> </Incidents> </LocalEvents>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Local Events not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /WZDx/Activities:
    get:
      tags:
        - WZDx
      summary: WZDx Activities
      description: Work zone related activities occurring throughout the State of Oregon formatted according to the WZDx standard created by the FHWA and USDOT.
      operationId: WZDx_GetActivitiesFilter
      parameters:
        - name: subidentifier
          in: query
          description: "Accepts a single subidentifier, or multiple comma delimited subidentifier. \r\n            Ranges optional. Ex. \" 100000, 100005-100010\""
          schema:
            type: string
        - name: roadName
          in: query
          description: "Accepts single a roadName, or multiple comma delimited roadNames. Performs a contains search. \r\n            Ex. \"I5,US97,OR\" returns every item on the state roads I5, US97, and OR."
          schema:
            type: string
        - name: wz_status
          in: query
          description: The wz_status fields accepts single wz_status types. Ex. “Active”
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat \r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WZDxActivities'
              example:
                Header:
                  TimeStampUpdate: string
                  MetadataURL: string
                  VersionNo: string
                Activities:
                  - Identifier: string
                    SubIdentifier: 0
                    StartDateTime:
                      StartDateTimeEst: string
                    EndDateTime:
                      EndDateTimeEst: string
                    BeginLocation:
                      RoadName: string
                      RoadNum: string
                      RoadDirection: string
                      Latitude: 0
                      Longitude: 0
                      Milepoint: 0
                      CrossStreet: string
                    EndLocation:
                      Latitude: 0
                      Longitude: 0
                      Milepoint: 0
                      CrossStreet: string
                    WZStatus: string
                    TotalLanes: 0
                    Lanes:
                      - LaneEdgeReference: string
                        LaneNumber: string
                        LaneStatus: string
                        LaneType: string
                    WorkersPresent: string
                    ReducedSpdPosted: string
                    RoadRestrictions: string
                    Description: string
                    IssuingOrganization: string
                    TimeStampEventCreation: string
                    TimeStampEventUpdate: string
            text/json:
              schema:
                $ref: '#/components/schemas/WZDxActivities'
              example:
                Header:
                  TimeStampUpdate: string
                  MetadataURL: string
                  VersionNo: string
                Activities:
                  - Identifier: string
                    SubIdentifier: 0
                    StartDateTime:
                      StartDateTimeEst: string
                    EndDateTime:
                      EndDateTimeEst: string
                    BeginLocation:
                      RoadName: string
                      RoadNum: string
                      RoadDirection: string
                      Latitude: 0
                      Longitude: 0
                      Milepoint: 0
                      CrossStreet: string
                    EndLocation:
                      Latitude: 0
                      Longitude: 0
                      Milepoint: 0
                      CrossStreet: string
                    WZStatus: string
                    TotalLanes: 0
                    Lanes:
                      - LaneEdgeReference: string
                        LaneNumber: string
                        LaneStatus: string
                        LaneType: string
                    WorkersPresent: string
                    ReducedSpdPosted: string
                    RoadRestrictions: string
                    Description: string
                    IssuingOrganization: string
                    TimeStampEventCreation: string
                    TimeStampEventUpdate: string
            application/xml:
              schema:
                $ref: '#/components/schemas/WZDxActivities'
              example: <WZDxActivities> <Header> <TimeStampUpdate>string</TimeStampUpdate> <MetadataURL>string</MetadataURL> <VersionNo>string</VersionNo> </Header> <Activities> <Identifier>string</Identifier> <SubIdentifier>0</SubIdentifier> <StartDateTime> <StartDateTimeEst>string</StartDateTimeEst> </StartDateTime> <EndDateTime> <EndDateTimeEst>string</EndDateTimeEst> </EndDateTime> <BeginLocation> <RoadName>string</RoadName> <RoadNum>string</RoadNum> <RoadDirection>string</RoadDirection> <Latitude>0</Latitude> <Longitude>0</Longitude> <Milepoint>0</Milepoint> <CrossStreet>string</CrossStreet> </BeginLocation> <EndLocation> <Latitude>0</Latitude> <Longitude>0</Longitude> <Milepoint>0</Milepoint> <CrossStreet>string</CrossStreet> </EndLocation> <WZStatus>string</WZStatus> <TotalLanes>0</TotalLanes> <Lanes> <LaneEdgeReference>string</LaneEdgeReference> <LaneNumber>string</LaneNumber> <LaneStatus>string</LaneStatus> <LaneType>string</LaneType> </Lanes> <WorkersPresent>string</WorkersPresent> <ReducedSpdPosted>string</ReducedSpdPosted> <RoadRestrictions>string</RoadRestrictions> <Description>string</Description> <IssuingOrganization>string</IssuingOrganization> <TimeStampEventCreation>string</TimeStampEventCreation> <TimeStampEventUpdate>string</TimeStampEventUpdate> </Activities> </WZDxActivities>
            text/xml:
              schema:
                $ref: '#/components/schemas/WZDxActivities'
              example: <WZDxActivities> <Header> <TimeStampUpdate>string</TimeStampUpdate> <MetadataURL>string</MetadataURL> <VersionNo>string</VersionNo> </Header> <Activities> <Identifier>string</Identifier> <SubIdentifier>0</SubIdentifier> <StartDateTime> <StartDateTimeEst>string</StartDateTimeEst> </StartDateTime> <EndDateTime> <EndDateTimeEst>string</EndDateTimeEst> </EndDateTime> <BeginLocation> <RoadName>string</RoadName> <RoadNum>string</RoadNum> <RoadDirection>string</RoadDirection> <Latitude>0</Latitude> <Longitude>0</Longitude> <Milepoint>0</Milepoint> <CrossStreet>string</CrossStreet> </BeginLocation> <EndLocation> <Latitude>0</Latitude> <Longitude>0</Longitude> <Milepoint>0</Milepoint> <CrossStreet>string</CrossStreet> </EndLocation> <WZStatus>string</WZStatus> <TotalLanes>0</TotalLanes> <Lanes> <LaneEdgeReference>string</LaneEdgeReference> <LaneNumber>string</LaneNumber> <LaneStatus>string</LaneStatus> <LaneType>string</LaneType> </Lanes> <WorkersPresent>string</WorkersPresent> <ReducedSpdPosted>string</ReducedSpdPosted> <RoadRestrictions>string</RoadRestrictions> <Description>string</Description> <IssuingOrganization>string</IssuingOrganization> <TimeStampEventCreation>string</TimeStampEventCreation> <TimeStampEventUpdate>string</TimeStampEventUpdate> </Activities> </WZDxActivities>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: WZDx events not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Tle/TleWazeMetadata:
    get:
      tags:
        - Tle
      summary: 'Metadata: TLE and Waze Incidents'
      description: Returns an inventory of the enumerated values that are held within the TripCheck API Incidents and TLE Incidents datafeeds.
      operationId: Tle_GetTLEWazeMetadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TLEWazeMetadata'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                TLE-incident-items:
                  TLE-incd-type-list:
                    - type-id: 0
                      type: string
                  TLE-travel-impact-list:
                    - impact-id: 0
                      impact-desc: string
                Waze-incident-items:
                  Waze-incd-type-list:
                    - type: string
            text/json:
              schema:
                $ref: '#/components/schemas/TLEWazeMetadata'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                TLE-incident-items:
                  TLE-incd-type-list:
                    - type-id: 0
                      type: string
                  TLE-travel-impact-list:
                    - impact-id: 0
                      impact-desc: string
                Waze-incident-items:
                  Waze-incd-type-list:
                    - type: string
            application/xml:
              schema:
                $ref: '#/components/schemas/TLEWazeMetadata'
              example: <TLEWazeMetadata> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <TLE-incident-items> <TLE-incd-type-list> <type-id>0</type-id> <type>string</type> </TLE-incd-type-list> <TLE-travel-impact-list> <impact-id>0</impact-id> <impact-desc>string</impact-desc> </TLE-travel-impact-list> </TLE-incident-items> <Waze-incident-items> <Waze-incd-type-list> <type>string</type> </Waze-incd-type-list> </Waze-incident-items> </TLEWazeMetadata>
            text/xml:
              schema:
                $ref: '#/components/schemas/TLEWazeMetadata'
              example: <TLEWazeMetadata> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <TLE-incident-items> <TLE-incd-type-list> <type-id>0</type-id> <type>string</type> </TLE-incd-type-list> <TLE-travel-impact-list> <impact-id>0</impact-id> <impact-desc>string</impact-desc> </TLE-travel-impact-list> </TLE-incident-items> <Waze-incident-items> <Waze-incd-type-list> <type>string</type> </Waze-incd-type-list> </Waze-incident-items> </TLEWazeMetadata>
        '404':
          description: TLE Waze Metadata not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Incidents/WazeSpec:
    get:
      tags:
        - Inc
      summary: Incidents - Waze Format
      description: "Current traffic incidents that are being reported on state highways by ODOT and formatted to the Waze CIFS V2 standard\r\n– e.g. crashes, planned closures, and construction zones."
      operationId: Inc_GetIncidentsFilterForWaze
      parameters:
        - name: IncidentId
          in: query
          description: 'Accepts single incident-id, or multiple comma delimited incident-ids. Ranges optional. Ex. "224412, 100000-100010"'
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\" \r\n            returns every item on route I5, US97, and OR state \r\n            routes."
          schema:
            type: string
        - name: Type
          in: query
          description: 'Accepts a single incident type,or multiple comma-delimited types. Ex. "ACCIDENT,ROAD_CLOSED,CONSTRUCTION,HAZARD"'
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is \r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/incidents'
              example:
                timestamp: string
                noNamespaceSchemaLocation: string
                incident:
                  - parent_event:
                      id: string
                    id: string
                    creationtime: string
                    updatetime: string
                    source:
                      reference: string
                      name: string
                      url: string
                    type: ACCIDENT
                    subtype: Item
                    description: string
                    location:
                      location_description: string
                      street: string
                      polyline: string
                      direction: ONE_DIRECTION
                    starttime: string
                    endtime: string
                    schedule:
                      everyday: string
                      monday: string
                      tuesday: string
                      wednesday: string
                      thursday: string
                      friday: string
                      saturday: string
                      sunday: string
            text/json:
              schema:
                $ref: '#/components/schemas/incidents'
              example:
                timestamp: string
                noNamespaceSchemaLocation: string
                incident:
                  - parent_event:
                      id: string
                    id: string
                    creationtime: string
                    updatetime: string
                    source:
                      reference: string
                      name: string
                      url: string
                    type: ACCIDENT
                    subtype: Item
                    description: string
                    location:
                      location_description: string
                      street: string
                      polyline: string
                      direction: ONE_DIRECTION
                    starttime: string
                    endtime: string
                    schedule:
                      everyday: string
                      monday: string
                      tuesday: string
                      wednesday: string
                      thursday: string
                      friday: string
                      saturday: string
                      sunday: string
            application/xml:
              schema:
                $ref: '#/components/schemas/incidents'
              example: <incidents> <timestamp>string</timestamp> <noNamespaceSchemaLocation>string</noNamespaceSchemaLocation> <incident> <parent_event> <id>string</id> </parent_event> <id>string</id> <creationtime>string</creationtime> <updatetime>string</updatetime> <source> <reference>string</reference> <name>string</name> <url>string</url> </source> <type>ACCIDENT</type> <subtype>Item</subtype> <description>string</description> <location> <location_description>string</location_description> <street>string</street> <polyline>string</polyline> <direction>ONE_DIRECTION</direction> </location> <starttime>string</starttime> <endtime>string</endtime> <schedule> <everyday>string</everyday> <monday>string</monday> <tuesday>string</tuesday> <wednesday>string</wednesday> <thursday>string</thursday> <friday>string</friday> <saturday>string</saturday> <sunday>string</sunday> </schedule> </incident> </incidents>
            text/xml:
              schema:
                $ref: '#/components/schemas/incidents'
              example: <incidents> <timestamp>string</timestamp> <noNamespaceSchemaLocation>string</noNamespaceSchemaLocation> <incident> <parent_event> <id>string</id> </parent_event> <id>string</id> <creationtime>string</creationtime> <updatetime>string</updatetime> <source> <reference>string</reference> <name>string</name> <url>string</url> </source> <type>ACCIDENT</type> <subtype>Item</subtype> <description>string</description> <location> <location_description>string</location_description> <street>string</street> <polyline>string</polyline> <direction>ONE_DIRECTION</direction> </location> <starttime>string</starttime> <endtime>string</endtime> <schedule> <everyday>string</everyday> <monday>string</monday> <tuesday>string</tuesday> <wednesday>string</wednesday> <thursday>string</thursday> <friday>string</friday> <saturday>string</saturday> <sunday>string</sunday> </schedule> </incident> </incidents>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Incidents not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /v2/Rwis/Inventory:
    get:
      tags:
        - Rwis
      summary: RWIS Inventory V2
      description: Name and location of all the Weather Stations along state highways and what each station can measure.
      operationId: Rwis_GetInventoryFilterV2
      parameters:
        - name: StationId
          in: query
          description: "Accepts single station-id, or multiple comma delimited\r\n            station-ids which for v2 are MM Item Codes. Ranges NOT supported in v2. Ex. \"2RW001, 2RW013\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes. Depends on ~\\AppData\\RoutesMetadata.xml"
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                ess-site-list:
                  - station-id: 0
                    station-name: string
                    device-update-time: string
                    latitude: 0
                    longitude: 0
                    elevation: 0
                    route-id: string
                    milepoint: 0
                    ess-inventory-list:
                      - device-id: 0
                        device-name: string
                        device-description: string
            text/json:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                ess-site-list:
                  - station-id: 0
                    station-name: string
                    device-update-time: string
                    latitude: 0
                    longitude: 0
                    elevation: 0
                    route-id: string
                    milepoint: 0
                    ess-inventory-list:
                      - device-id: 0
                        device-name: string
                        device-description: string
            application/xml:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example: <RwisInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <ess-site-list> <station-id>0</station-id> <station-name>string</station-name> <device-update-time>string</device-update-time> <latitude>0</latitude> <longitude>0</longitude> <elevation>0</elevation> <route-id>string</route-id> <milepoint>0</milepoint> <ess-inventory-list> <device-id>0</device-id> <device-name>string</device-name> <device-description>string</device-description> </ess-inventory-list> </ess-site-list> </RwisInventory>
            text/xml:
              schema:
                $ref: '#/components/schemas/RwisInventory'
              example: <RwisInventory> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <ess-site-list> <station-id>0</station-id> <station-name>string</station-name> <device-update-time>string</device-update-time> <latitude>0</latitude> <longitude>0</longitude> <elevation>0</elevation> <route-id>string</route-id> <milepoint>0</milepoint> <ess-inventory-list> <device-id>0</device-id> <device-name>string</device-name> <device-description>string</device-description> </ess-inventory-list> </ess-site-list> </RwisInventory>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: RWIS inventory not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /v2/Rwis/Status:
    get:
      tags:
        - Rwis
      summary: RWIS Status V2
      description: "Weather data from automated Weather stations along state highways \r\n(e.g. Air Temperature, Surface Temperature, wind speed, etc.) \r\nNote: not all stations can measure all types of weather factors.\r\nNote: uses RwisStatusNtcip.xml instead of RwisStatus2.xml to produce NTCIP standard values."
      operationId: Rwis_GetStatusFilterV2
      parameters:
        - name: StationId
          in: query
          description: "Accepts single station-id, or multiple comma delimited\r\n            station-ids which for v2 are MM Item Codes. Ranges NOT supported for V2. Ex. \"2RW001, 2RW013\""
          schema:
            type: string
        - name: RouteId
          in: query
          description: "Accepts single route-id, or multiple comma delimited\r\n            route-ids. Performs a contains search. Ex. \"I5,US97,OR\"\r\n            returns every item on route I5, US97, and OR state\r\n            routes."
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is\r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RwisStatusV2'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                WeatherStations:
                  - station-id: string
                    RoadWeather:
                      air-temperature: 0
                      atmospheric-pressure: 0
                      avg-wind-direction: 0
                      avg-wind-gust-direction: 0
                      avg-wind-gust-speed: 0
                      avg-wind-speed: 0
                      dewpoint-temp: 0
                      last-update-time: string
                      precip-situation: string
                      precip-rate: 0
                      relative-humidity: 0
                      visibility: 0
                    SurfaceCondition:
                      mobile-friction: 0
                      surface-freeze-point: 0
                      surface-salinity: 0
                      surface-temperatures:
                        - sensor-id: 0
                          surface-temperature: 0
                      water-depth: 0
            text/json:
              schema:
                $ref: '#/components/schemas/RwisStatusV2'
              example:
                organization-information:
                  organization-id: string
                  organization-name: string
                  last-update-time: string
                WeatherStations:
                  - station-id: string
                    RoadWeather:
                      air-temperature: 0
                      atmospheric-pressure: 0
                      avg-wind-direction: 0
                      avg-wind-gust-direction: 0
                      avg-wind-gust-speed: 0
                      avg-wind-speed: 0
                      dewpoint-temp: 0
                      last-update-time: string
                      precip-situation: string
                      precip-rate: 0
                      relative-humidity: 0
                      visibility: 0
                    SurfaceCondition:
                      mobile-friction: 0
                      surface-freeze-point: 0
                      surface-salinity: 0
                      surface-temperatures:
                        - sensor-id: 0
                          surface-temperature: 0
                      water-depth: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/RwisStatusV2'
              example: <RwisStatusV2> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <WeatherStations> <station-id>string</station-id> <RoadWeather> <air-temperature>0</air-temperature> <atmospheric-pressure>0</atmospheric-pressure> <avg-wind-direction>0</avg-wind-direction> <avg-wind-gust-direction>0</avg-wind-gust-direction> <avg-wind-gust-speed>0</avg-wind-gust-speed> <avg-wind-speed>0</avg-wind-speed> <dewpoint-temp>0</dewpoint-temp> <last-update-time>string</last-update-time> <precip-situation>string</precip-situation> <precip-rate>0</precip-rate> <relative-humidity>0</relative-humidity> <visibility>0</visibility> </RoadWeather> <SurfaceCondition> <mobile-friction>0</mobile-friction> <surface-freeze-point>0</surface-freeze-point> <surface-salinity>0</surface-salinity> <surface-temperatures> <sensor-id>0</sensor-id> <surface-temperature>0</surface-temperature> </surface-temperatures> <water-depth>0</water-depth> </SurfaceCondition> </WeatherStations> </RwisStatusV2>
            text/xml:
              schema:
                $ref: '#/components/schemas/RwisStatusV2'
              example: <RwisStatusV2> <organization-information> <organization-id>string</organization-id> <organization-name>string</organization-name> <last-update-time>string</last-update-time> </organization-information> <WeatherStations> <station-id>string</station-id> <RoadWeather> <air-temperature>0</air-temperature> <atmospheric-pressure>0</atmospheric-pressure> <avg-wind-direction>0</avg-wind-direction> <avg-wind-gust-direction>0</avg-wind-gust-direction> <avg-wind-gust-speed>0</avg-wind-gust-speed> <avg-wind-speed>0</avg-wind-speed> <dewpoint-temp>0</dewpoint-temp> <last-update-time>string</last-update-time> <precip-situation>string</precip-situation> <precip-rate>0</precip-rate> <relative-humidity>0</relative-humidity> <visibility>0</visibility> </RoadWeather> <SurfaceCondition> <mobile-friction>0</mobile-friction> <surface-freeze-point>0</surface-freeze-point> <surface-salinity>0</surface-salinity> <surface-temperatures> <sensor-id>0</sensor-id> <surface-temperature>0</surface-temperature> </surface-temperatures> <water-depth>0</water-depth> </SurfaceCondition> </WeatherStations> </RwisStatusV2>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: RWIS status not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
  /Tle/WazeSpec:
    get:
      tags:
        - Tle
      summary: Local Incidents - Waze Format
      description: "Events occurring on local and county roads as reported by non-ODOT government agencies \r\nand formatted to the Waze CIFS V2 standard… (ex., Washington County, City of Eugene Public Works)"
      operationId: Tle_GetLocalEventsForWaze
      parameters:
        - name: IncidentId
          in: query
          description: 'Accepts single incident-id, ormultiple comma-delimited incident-ids. Ranges optional. Ex. "224,100-110"'
          schema:
            type: string
        - name: Type
          in: query
          description: 'Accepts a single incident type,or multiple comma-delimited types. Ex. "ACCIDENT,ROAD_CLOSED,CONSTRUCTION,HAZARD"'
          schema:
            type: string
        - name: Bounds
          in: query
          description: "Lon/Lat rectangle bounds to filter:\r\n            minLon,minLat,maxLon,maxLat\r\n            Ex., \"-122.875228,45.414915,-122.631469,45.559331\" is \r\n            the bounds of Portland, OR"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/incidents'
              example:
                timestamp: string
                noNamespaceSchemaLocation: string
                incident:
                  - parent_event:
                      id: string
                    id: string
                    creationtime: string
                    updatetime: string
                    source:
                      reference: string
                      name: string
                      url: string
                    type: ACCIDENT
                    subtype: Item
                    description: string
                    location:
                      location_description: string
                      street: string
                      polyline: string
                      direction: ONE_DIRECTION
                    starttime: string
                    endtime: string
                    schedule:
                      everyday: string
                      monday: string
                      tuesday: string
                      wednesday: string
                      thursday: string
                      friday: string
                      saturday: string
                      sunday: string
            text/json:
              schema:
                $ref: '#/components/schemas/incidents'
              example:
                timestamp: string
                noNamespaceSchemaLocation: string
                incident:
                  - parent_event:
                      id: string
                    id: string
                    creationtime: string
                    updatetime: string
                    source:
                      reference: string
                      name: string
                      url: string
                    type: ACCIDENT
                    subtype: Item
                    description: string
                    location:
                      location_description: string
                      street: string
                      polyline: string
                      direction: ONE_DIRECTION
                    starttime: string
                    endtime: string
                    schedule:
                      everyday: string
                      monday: string
                      tuesday: string
                      wednesday: string
                      thursday: string
                      friday: string
                      saturday: string
                      sunday: string
            application/xml:
              schema:
                $ref: '#/components/schemas/incidents'
              example: <incidents> <timestamp>string</timestamp> <noNamespaceSchemaLocation>string</noNamespaceSchemaLocation> <incident> <parent_event> <id>string</id> </parent_event> <id>string</id> <creationtime>string</creationtime> <updatetime>string</updatetime> <source> <reference>string</reference> <name>string</name> <url>string</url> </source> <type>ACCIDENT</type> <subtype>Item</subtype> <description>string</description> <location> <location_description>string</location_description> <street>string</street> <polyline>string</polyline> <direction>ONE_DIRECTION</direction> </location> <starttime>string</starttime> <endtime>string</endtime> <schedule> <everyday>string</everyday> <monday>string</monday> <tuesday>string</tuesday> <wednesday>string</wednesday> <thursday>string</thursday> <friday>string</friday> <saturday>string</saturday> <sunday>string</sunday> </schedule> </incident> </incidents>
            text/xml:
              schema:
                $ref: '#/components/schemas/incidents'
              example: <incidents> <timestamp>string</timestamp> <noNamespaceSchemaLocation>string</noNamespaceSchemaLocation> <incident> <parent_event> <id>string</id> </parent_event> <id>string</id> <creationtime>string</creationtime> <updatetime>string</updatetime> <source> <reference>string</reference> <name>string</name> <url>string</url> </source> <type>ACCIDENT</type> <subtype>Item</subtype> <description>string</description> <location> <location_description>string</location_description> <street>string</street> <polyline>string</polyline> <direction>ONE_DIRECTION</direction> </location> <starttime>string</starttime> <endtime>string</endtime> <schedule> <everyday>string</everyday> <monday>string</monday> <tuesday>string</tuesday> <wednesday>string</wednesday> <thursday>string</thursday> <friday>string</friday> <saturday>string</saturday> <sunday>string</sunday> </schedule> </incident> </incidents>
        '400':
          description: Invalid parameter
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
        '404':
          description: Local Events not available
          content:
            application/json: { }
            text/json: { }
            application/xml: { }
            text/xml: { }
components:
  schemas:
    CctvInventory:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        CCTVInventoryRequest:
          type: array
          items:
            $ref: '#/components/schemas/CctvInventoryItem'
          description: List of CCTV Inventory Items
      description: CCTV Inventory List
    OrganizationInfo:
      type: object
      properties:
        organization-id:
          type: string
          description: Organization Identifier
        organization-name:
          type: string
          description: Organization Name
        last-update-time:
          type: string
          description: Date of last update (UTC)
          format: date-time
      description: Organization Information
    CctvInventoryItem:
      type: object
      properties:
        device-id:
          type: integer
          description: Camera identifier
          format: int32
        device-name:
          type: string
          description: Camera name
        latitude:
          type: number
          description: Geographic latitude
          format: double
        longitude:
          type: number
          description: Geographic longitude
          format: double
        hwy-id:
          type: string
          description: Highway identifier
        route-id:
          type: string
          description: Route identifier
        milepoint:
          type: number
          description: Camera milepoint
          format: double
        cctv-url:
          type: string
          description: CCTV image URL
        cctv-other:
          type: string
          description: CCTV location/description
        last-update-time:
          type: string
          description: Date of last update
          format: date-time
      description: CCTV Inventory Item
    ClsData:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        CLS-inventory:
          type: array
          items:
            $ref: '#/components/schemas/ClsDataItem'
          description: Array of station-bin readings
      description: CLS Bin Data (Length and Speed) output class
    ClsDataItem:
      type: object
      properties:
        station-id:
          type: integer
          description: The unique station identifier
          format: int32
        lane:
          type: integer
          description: The lane number this reading is from
          format: int32
        bin-number:
          type: integer
          description: The identifier of the bin classification
          format: int32
        bin-count:
          type: integer
          description: Number of vehicles matching the classification during the collection cycle
          format: int32
        recorded-date:
          type: string
          description: The date and time this data was recorded
          format: date-time
      description: Class to hold a single station-bin reading
    ClsInventory:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        cls-inventory-items:
          type: array
          items:
            $ref: '#/components/schemas/ClsInventoryItem'
          description: Array of CLS station-bin details
      description: CLS Inventory output class
    ClsInventoryItem:
      type: object
      properties:
        station-id:
          type: integer
          description: The unique station identifier
          format: int32
        type:
          type: string
          description: Classification of data collected by the station
        bin-number:
          type: integer
          description: The identifier of the bin classification
          format: int32
        bin-value-description:
          type: number
          description: The classification aggregate value
          format: double
        configure-time:
          type: string
          description: The time at which the classfication was configured
          format: date-time
      description: Class to hold a single bin configuration for a CLS station
    DmsInventory:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        dms-inventory-items:
          type: array
          items:
            $ref: '#/components/schemas/DmsInventoryItem'
          description: List of DMS Inventory Items
      description: DMS Inventory List
    DmsInventoryItem:
      type: object
      properties:
        device-id:
          type: integer
          description: The unique device identifier
          format: int32
        device-name:
          type: string
          description: Device name and descriptor
        latitude:
          type: number
          description: Geographic latitude
          format: double
        longitude:
          type: number
          description: Geographic longitude
          format: double
        elevation:
          type: integer
          description: Elevation/altitude above sea level
          format: int32
        route-id:
          type: string
          description: Route identifier
        milepoint:
          type: number
          description: Device milepoint location
          format: double
        class:
          type: string
          description: Device class
        subclass:
          type: string
          description: Device subclass
      description: DMS Inventory Item
    DmsStatus:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        dmsItems:
          type: array
          items:
            $ref: '#/components/schemas/DmsStatusItem'
          description: List of DMS Status Items
      description: DMS Status List
    DmsStatusItem:
      type: object
      properties:
        device-id:
          type: integer
          description: The unique device identifier
          format: int32
        dms-device-status:
          type: string
          description: Device status
        tocsEventId:
          type: string
          description: TOCS Event Id
        dmsCurrentMessage:
          $ref: '#/components/schemas/DmsCurrentMessage'
      description: DMS Status Item
    DmsCurrentMessage:
      type: object
      properties:
        phase1Line1:
          type: string
          description: Message 1 Line 1
        phase1Line2:
          type: string
          description: Message 1 Line 2
        phase1Line3:
          type: string
          description: Message 1 Line 3
        phase2Line1:
          type: string
          description: Message 2 Line 1
        phase2Line2:
          type: string
          description: Message 2 Line 2
        phase2Line3:
          type: string
          description: Message 2 Line 3
      description: Current message on the sign
    IncdIncidents:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/IncdIncident'
          description: List of Incidents
      description: Incidents List
    IncdIncident:
      type: object
      properties:
        incident-id:
          type: string
          description: TripCheck Incident Identifer
        event-id:
          type: string
          description: TOCS Event identifier
        event-type-id:
          type: string
          description: Event Type identifier
        event-subtype-id:
          type: string
          description: Event Subtype identifier
        update-time:
          type: string
          description: Date of last update
          format: date-time
        create-time:
          type: string
          description: Date of creation
          format: date-time
        is-active:
          type: string
          description: Is Active Flag
        impact-id:
          type: string
          description: Impact Id
        impact-desc:
          type: string
          description: Impact Desc
        headline:
          type: string
          description: Headline message of the incident
        comments:
          type: string
          description: Comments regarding the incident
        location:
          $ref: '#/components/schemas/IncdLocation'
        travel-lanes:
          $ref: '#/components/schemas/IncdTravelLanes'
        off-hwy-lanes:
          $ref: '#/components/schemas/IncdOffHwyLanes'
        schedule:
          $ref: '#/components/schemas/IncdSchedule'
        info-url:
          type: string
          description: URL for further incident Information
        files:
          type: array
          items:
            $ref: '#/components/schemas/IncdIFTFile'
          description: List of IFT Files
      description: INCD Incident class
    IncdLocation:
      type: object
      properties:
        location-name:
          type: string
          description: Location Name
        route-id:
          type: string
          description: Route identifier
        hwy-id:
          type: string
          description: Highway identifier
        direction:
          type: string
          description: Direction of the incident or event
        geometry-wkt-line:
          type: string
          description: Geometry Well Known Text Line
        start-location:
          $ref: '#/components/schemas/IncdStartLocation'
        end-location:
          $ref: '#/components/schemas/IncdEndLocation'
      description: Location
    IncdTravelLanes:
      type: object
      properties:
        decreasing-direction:
          type: string
          description: Decreasing Direction
        decreasing-lane-count:
          type: integer
          description: Decreasing Lane Count
          format: int32
        increasing-direction:
          type: string
          description: Increasing Direction
        increasing-lane-count:
          type: integer
          description: Increasing Lane Count
          format: int32
        lane-edge-reference:
          type: string
          description: Lane Edge Reference
        affected-lanes:
          type: array
          items:
            $ref: '#/components/schemas/IncdLane'
          description: Travel affected highway lanes
      description: Travel Lanes
    IncdOffHwyLanes:
      type: object
      properties:
        affected-lanes:
          type: array
          items:
            $ref: '#/components/schemas/IncdLane'
          description: Off highway affected lanes
      description: Off Highway Lanes
    IncdSchedule:
      type: object
      properties:
        project-schedule:
          $ref: '#/components/schemas/IncdProjectSchedule'
      description: Response Schedule
    IncdIFTFile:
      type: object
      properties:
        url:
          type: string
          description: URL
        file-description:
          type: string
          description: File Description
      description: IFT File
    IncdStartLocation:
      type: object
      properties:
        location-desc:
          type: string
          description: Start location
        start-lat:
          type: number
          description: Start geographic latitude
          format: double
        start-long:
          type: number
          description: Start geographic longitude
          format: double
        start-milepost:
          type: number
          description: Start milepost
          format: double
        start-point-geometry-wkt:
          type: string
          description: Start Point Geometry Well Known Text
      description: Begin Location
    IncdEndLocation:
      type: object
      properties:
        location-desc:
          type: string
          description: End location
        end-lat:
          type: number
          description: End geographic latitude
          format: double
        end-long:
          type: number
          description: End geographic longitude
          format: double
        end-milepost:
          type: number
          description: End milepost
          format: double
        end-point-geometry-wkt:
          type: string
          description: End Point Geometry Well Known Text
      description: End Location
    IncdLane:
      type: object
      properties:
        lane-id:
          type: string
          description: Descriptor of which lane is affected
        lane-type:
          type: string
          description: Type of lane affected
        direction:
          type: string
          description: Direction of the affected lanes
      description: Incident Lane
    IncdProjectSchedule:
      type: object
      properties:
        start-date-time:
          type: string
          description: Start DateTime
          format: date-time
        end-date-time:
          type: string
          description: End DateTime
          format: date-time
      description: Response Project Schedule
    incidents:
      type: object
      properties:
        timestamp:
          type: string
          description: Specifies the creation time of the feed.
          format: date-time
        noNamespaceSchemaLocation:
          type: string
        incident:
          type: array
          items:
            $ref: '#/components/schemas/incidentsIncident'
          description: List of incidents
      description: "Incident information\r\nWaze accepts feed data for both real-time or planned traffic incidents, \r\nincluding hazards on the road, construction, and more.Incidents don’t \r\naffect real-time navigation, they only alert drivers.\r\n<a href=\"https://developers.google.com/waze/data-feed/incident-information\" />"
    incidentsIncident:
      type: object
      properties:
        parent_event:
          $ref: '#/components/schemas/incidentsIncidentParent_event'
        id:
          type: string
          description: "Specifies an alphanumeric or numeric identifier.\r\nThe ID must be globally unique to your feed and remain stable over an incident’s lifetime."
        creationtime:
          type: string
          description: Datetime when the incident was created.
          format: date-time
        updatetime:
          type: string
          description: Datetime when the incident was last updated.
          format: date-time
        source:
          $ref: '#/components/schemas/incidentsIncidentSource'
        type:
          enum:
            - ACCIDENT
            - CONSTRUCTION
            - HAZARD
            - ROAD_CLOSED
          type: string
          description: Specifies the type of incident.
        subtype:
          enum:
            - Item
            - ACCIDENT_MAJOR
            - ACCIDENT_MINOR
            - HAZARD_ON_ROAD
            - HAZARD_ON_ROAD_CAR_STOPPED
            - HAZARD_ON_ROAD_CONSTRUCTION
            - HAZARD_ON_ROAD_ICE
            - HAZARD_ON_ROAD_LANE_CLOSED
            - HAZARD_ON_ROAD_OBJECT
            - HAZARD_ON_ROAD_OIL
            - HAZARD_ON_ROAD_POT_HOLE
            - HAZARD_ON_ROAD_ROAD_KILL
            - HAZARD_ON_ROAD_TRAFFIC_LIGHT_FAULT
            - HAZARD_ON_SHOULDER
            - HAZARD_ON_SHOULDER_ANIMALS
            - HAZARD_ON_SHOULDER_CAR_STOPPED
            - HAZARD_ON_SHOULDER_MISSING_SIGN
            - HAZARD_WEATHER
            - HAZARD_WEATHER_FLOOD
            - HAZARD_WEATHER_FOG
            - HAZARD_WEATHER_FREEZING_RAIN
            - HAZARD_WEATHER_HAIL
            - HAZARD_WEATHER_HEAT_WAVE
            - HAZARD_WEATHER_HEAVY_RAIN
            - HAZARD_WEATHER_HEAVY_SNOW
            - HAZARD_WEATHER_HURRICANE
            - HAZARD_WEATHER_MONSOON
            - HAZARD_WEATHER_TORNADO
            - JAM_HEAVY_TRAFFIC
            - JAM_LIGHT_TRAFFIC
            - JAM_MODERATE_TRAFFIC
            - JAM_STAND_STILL_TRAFFIC
            - ROAD_CLOSED_CONSTRUCTION
            - ROAD_CLOSED_EVENT
            - ROAD_CLOSED_HAZARD
          type: string
          description: Further refinement of the information in the "type" element.
        description:
          type: string
          description: 'Describes the incident, including the possible cause and consequences of the disruption.'
        location:
          $ref: '#/components/schemas/incidentsIncidentLocation'
        starttime:
          type: string
          description: Specifies the start datetime for the period of disruption.
          format: date-time
        endtime:
          type: string
          description: Specifies the end datetime for the period of disruption.
          format: date-time
        schedule:
          $ref: '#/components/schemas/incidentsIncidentSchedule'
      description: Encapsulates all of the information pertaining to a single incident.
    incidentsIncidentParent_event:
      type: object
      properties:
        id:
          type: string
          description: Specifies an alphanumeric or numeric identifier. The ID must be globally unique to your feed and remain stable over an incident’s lifetime.
      description: 'For events with multiple closures such as marathons or festivals, you can associate the incident to an event object.'
    incidentsIncidentSource:
      type: object
      properties:
        reference:
          type: string
          description: Uses a reference ID to identify the organization that sourced the information.
        name:
          type: string
          description: 'Identifies the organization from which the information was sourced, by the organization’s name.'
        url:
          type: string
          description: Specifies the URL for the organization from which the information was sourced.
      description: Encapsulates the elements that specify the source of information for a single incident.
    incidentsIncidentLocation:
      type: object
      properties:
        location_description:
          type: string
          description: Specifies the address or other textual description of the incident’s location.
        street:
          type: string
          description: Specifies the name of the street on which the incident is occurring.
        polyline:
          type: string
          description: "Specifies the WGS84 latitude/longitude coordinates that describe the location of the incident.\r\nThe decimal value should have at least 6 digits (to ensure accuracy of 0.11m or better).\r\nFor any incident, you must submit at least two coordinates."
        direction:
          enum:
            - ONE_DIRECTION
            - BOTH_DIRECTIONS
          type: string
          description: Specifies whether the disruption or closure affects one or both sides of the road.
      description: Encapsulates the location information for the incident.
    incidentsIncidentSchedule:
      type: object
      properties:
        everyday:
          type: string
          description: ''
        monday:
          type: string
          description: ''
        tuesday:
          type: string
          description: ''
        wednesday:
          type: string
          description: ''
        thursday:
          type: string
          description: ''
        friday:
          type: string
          description: ''
        saturday:
          type: string
          description: ''
        sunday:
          type: string
          description: ''
      description: The schedule encapsulates all start and end times for an recurring incident.
    IncdMetadata:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        incident-metadata-items:
          $ref: '#/components/schemas/IncidentMetadataItems'
      description: All Incidents Metadata
    IncidentMetadataItems:
      type: object
      properties:
        event-types:
          type: array
          items:
            $ref: '#/components/schemas/IncdEventType'
          description: list of Event Types
        event-subtypes:
          type: array
          items:
            $ref: '#/components/schemas/IncdEventSubtype'
          description: List of Event Subtypes
      description: Class to hold the arrays of different incident metadata items.
    IncdEventType:
      type: object
      properties:
        id:
          type: string
          description: Incident event type
        name:
          type: string
          description: Description of event type
      description: Class to hold details about an individual event type
    IncdEventSubtype:
      type: object
      properties:
        id:
          type: string
          description: Incident event type
        name:
          type: string
          description: Description of event type
      description: Class to hold details about an individual event subtype
    MFParking:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        parkingLots:
          $ref: '#/components/schemas/ParkingLots'
      description: Multnomah Falls Parking Data output class
    ParkingLots:
      type: object
      properties:
        parkingLotCalculation:
          $ref: '#/components/schemas/MfpCalculation'
        parkingLotDataArray:
          type: array
          items:
            $ref: '#/components/schemas/MfpLotData'
          description: Array of collections of parking lot data
      description: Parking Lot Information and Data class
    MfpCalculation:
      type: object
      properties:
        last-update-time:
          type: string
          description: Last update time of the percentage data
          format: date-time
        location:
          $ref: '#/components/schemas/MfpLocation'
        percentFull:
          type: integer
          description: Percentage full for the parking lot
          format: int32
        percentFullMessage:
          type: string
          description: String representation of parking lot percentage full
      description: Parking lot location and percentage information
    MfpLotData:
      type: object
      properties:
        LOT_SUM_ID:
          type: integer
          description: Identifier for this lot sum object
          format: int32
        LOT_CAP_PCT_NO:
          type: integer
          description: Lot capacity percent
          format: int32
        GATE_STAT_CLOSE_THRSHLD_NO:
          type: integer
          description: Gate status close threshold
          format: int32
        GATE_STAT_OPEN_THRSHLD_NO:
          type: integer
          description: Gate status open threshold
          format: int32
        CAR_CNT_DAY_NO:
          type: integer
          description: Car count for the day
          format: int32
        CUR_CAR_CNT_NO:
          type: integer
          description: Current car count
          format: int32
        GATE_SYS_STAT_NO:
          type: integer
          description: Gate system status
          format: int32
        BLK_OUT_SIGN_POS_NO:
          type: integer
          description: Blank out sign position
          format: int32
        GATE_1_ALM_NO:
          type: integer
          description: Gate 1 alarm number
          format: int32
        GATE_2_ALM_NO:
          type: integer
          description: Gate 2 alarm number
          format: int32
        GATE_3_ALM_NO:
          type: integer
          description: Gate 3 alarm number
          format: int32
        GATE_4_ALM_NO:
          type: integer
          description: Gate 4 alarm number
          format: int32
        BOS_1_STAT_ALM_NO:
          type: integer
          description: Bos. 1 status alarm number
          format: int32
        BOS_2_STAT_ALM_NO:
          type: integer
          description: Bos. 2 status alarm number
          format: int32
        BOS_3_STAT_ALM_NO:
          type: integer
          description: Bos. 3 status alarm number
          format: int32
        BOS_4_STAT_ALM_NO:
          type: integer
          description: Bos. 4 status alarm number
          format: int32
        GATE_1_STAT_POS_NO:
          type: integer
          description: Gate 1 status position number
          format: int32
        GATE_2_STAT_POS_NO:
          type: integer
          description: Gate 2 status position number
          format: int32
        GATE_3_STAT_POS_NO:
          type: integer
          description: Gate 3 status position number
          format: int32
        GATE_4_STAT_POS_NO:
          type: integer
          description: Gate 4 status position number
          format: int32
        GATE_1_DTCTR_FAIL_ALM_NO:
          type: integer
          description: Gate 1 detector fail alarm number
          format: int32
        GATE_2_DTCTR_FAIL_ALM_NO:
          type: integer
          description: Gate 2 detector fail alarm number
          format: int32
        GATE_3_DTCTR_FAIL_ALM_NO:
          type: integer
          description: Gate 3 detector fail alarm number
          format: int32
        GATE_4_DTCTR_FAIL_ALM_NO:
          type: integer
          description: Gate 4 detector fail alarm number
          format: int32
        GATE_1_DTCTR_FAIL_CD_NO:
          type: integer
          description: Gate 1 detector fail code
          format: int32
        GATE_2_DTCTR_FAIL_CD_NO:
          type: integer
          description: Gate 2 detector fail code
          format: int32
        GATE_3_DTCTR_FAIL_CD_NO:
          type: integer
          description: Gate 3 detector fail code
          format: int32
        GATE_4_DTCTR_FAIL_CD_NO:
          type: integer
          description: Gate 4 detector fail code
          format: int32
        MAN_STAT_CD:
          type: integer
          description: Man. status code
          format: int32
        UD_DTTM:
          type: string
          description: Last update time
          format: date-time
      description: Collection of parking lot information and data
    MfpLocation:
      type: object
      properties:
        locationName:
          type: string
          description: The location name of the parking lot.
        latitude:
          type: number
          description: The latitude value of the coordinates of the parking lot's location.
          format: double
        longitude:
          type: number
          description: The longitude value of the coordinates of the parking lot's location.
          format: double
      description: Location data for the parking lot
    Routes:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        location-list:
          type: array
          items:
            type: string
          description: List of Routes
      description: Route Name List
    RWReports:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        road-weather-reports:
          type: array
          items:
            $ref: '#/components/schemas/RWReport'
          description: List of Reports
      description: Road and Weather Reports
    RWReport:
      type: object
      properties:
        station-id:
          type: integer
          description: Unique station segment identifier
          format: int32
        entry-time:
          type: string
          description: The station segment report entry time
          format: date-time
        expiry-time:
          type: string
          description: The station segment report expiration time
          format: date-time
        location:
          $ref: '#/components/schemas/RWLocation'
        air-temperature:
          type: number
          description: Temperature of the air in Celsius at the time the report was reported.
          format: double
        snowfall-accum-rate:
          type: number
          description: Amount of new roadside snow in centimeters since the last scheduled reporting time
          format: double
        adjacent-snow-depth:
          type: number
          description: Total depth of roadside snow in centimeters
          format: double
        weather-conditions:
          $ref: '#/components/schemas/RWWeatherConditions'
        road-conditions:
          $ref: '#/components/schemas/RWRoadConditions'
        commercial-vehicle-restriction:
          $ref: '#/components/schemas/RWCommVehicleRestriction'
        driving-restriction:
          $ref: '#/components/schemas/RWDrivingRestriction'
        comments:
          type: string
          description: Comments
      description: Road and Weather Report
    RWLocation:
      type: object
      properties:
        location-name:
          type: string
          description: Location Name
        route-id:
          type: string
          description: Route identifier
        hwy-id:
          type: string
          description: Highway identifier
        direction:
          type: string
          description: Direction
        start-location:
          $ref: '#/components/schemas/RWStartLocation'
        end-location:
          $ref: '#/components/schemas/RWEndLocation'
      description: Location
    RWWeatherConditions:
      type: object
      properties:
        weather-id:
          type: number
          description: Weather Id
          format: double
      description: WeatherConditions
    RWRoadConditions:
      type: object
      properties:
        road-cond-id:
          type: number
          description: Road Conditions Id
          format: double
      description: RoadConditions
    RWCommVehicleRestriction:
      type: object
      properties:
        restriction-id:
          type: number
          description: Restriction Id
          format: double
        restriction-type:
          type: string
          description: Restriction Type
      description: Commercial Vehicle Restriction
    RWDrivingRestriction:
      type: object
      properties:
        restriction-id:
          type: string
          description: Restriction Id
        restriction-start-milepost:
          type: number
          description: Restriction Start Milepost
          format: double
        restriction-end-milepost:
          type: number
          description: Restriction End Milepost
          format: double
      description: Driving Restriction
    RWStartLocation:
      type: object
      properties:
        start-lat:
          type: number
          description: Start geographic latitude
          format: double
        start-long:
          type: number
          description: Start geographic longitude
          format: double
        start-milepost:
          type: number
          description: Start milepost
          format: double
      description: Begin Location
    RWEndLocation:
      type: object
      properties:
        end-lat:
          type: number
          description: End geographic latitude
          format: double
        end-long:
          type: number
          description: End geographic longitude
          format: double
        end-milepost:
          type: number
          description: End milepost
          format: double
      description: End Location
    RWMetadata:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        road-weather-items:
          $ref: '#/components/schemas/RWItems'
      description: Road Weather Metadata
    RWItems:
      type: object
      properties:
        weather-condition-list:
          type: array
          items:
            $ref: '#/components/schemas/WeatherCondition'
          description: List of all weather condition identifiers and descriptions
        road-condition-list:
          type: array
          items:
            $ref: '#/components/schemas/RoadCondition'
          description: List of all road condition identifiers and descriptions
        commercial-vehicle-restriction-list:
          type: array
          items:
            $ref: '#/components/schemas/CVRestriction'
          description: 'List of all commercial vehicle restriction identifiers, types, and descriptions'
        driving-restriction-list:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
          description: List of all driving restriction identifiers and descriptions
      description: Class to hold the arrays of different road weather metadata items
    WeatherCondition:
      type: object
      properties:
        weather-id:
          type: integer
          description: Id of weather condition
          format: int32
        weather-desc:
          type: string
          description: Description of weather condition
      description: List of all weather condition identifiers and descriptions
    RoadCondition:
      type: object
      properties:
        road-cond-id:
          type: integer
          description: Id of road condition
          format: int32
        road-cond-desc:
          type: string
          description: Description of road condition
      description: List of all road condition identifiers and descriptions
    CVRestriction:
      type: object
      properties:
        restriction-id:
          type: integer
          description: Id of commercial vehicle restriction
          format: int32
        restriction-desc:
          type: string
          description: Description of commercial vehicle restriction
        restriction-type:
          type: string
          description: Type of commercial vehicle restriction
      description: 'List of all commercial vehicle restriction identifiers, types, and descriptions'
    Restriction:
      type: object
      properties:
        restriction-id:
          type: string
          description: Id of driving restriction
        restriction-desc:
          type: string
          description: Description of driving restriction
      description: List of all driving restriction identifiers and descriptions
    RwisInventory:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        ess-site-list:
          type: array
          items:
            $ref: '#/components/schemas/RwisInventorySiteInformation'
          description: List of RWIS Inventory Items
      description: RWIS Inventory List
    RwisInventorySiteInformation:
      type: object
      properties:
        station-id:
          type: integer
          description: RWIS Station identifier
          format: int32
        station-name:
          type: string
          description: RWIS Station name
        device-update-time:
          type: string
          description: Last update time of RWIS
          format: date-time
        latitude:
          type: number
          description: Latitude of RWIS
          format: double
        longitude:
          type: number
          description: Longitude of RWIS location
          format: double
        elevation:
          type: integer
          description: Elevation of RWIS location
          format: int32
        route-id:
          type: string
          description: Route where RWIS is located
        milepoint:
          type: number
          description: Milepoint of RWIS location
          format: double
        ess-inventory-list:
          type: array
          items:
            $ref: '#/components/schemas/RwisInventorySiteSensor'
          description: RWIS sensor list
      description: RWIS Inventory Item
    RwisInventorySiteSensor:
      type: object
      properties:
        device-id:
          type: integer
          description: Device Id
          format: int32
        device-name:
          type: string
          description: Device Name
        device-description:
          type: string
          description: Device Name
      description: RWIS sensor list
    RwisStatus:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        WeatherStations:
          type: array
          items:
            $ref: '#/components/schemas/RwisStatusSiteWeatherStation'
          description: List of RWIS Status Weather Stations
      description: RWIS Status Weather Station Site List
    RwisStatusSiteWeatherStation:
      type: object
      properties:
        station-id:
          type: integer
          description: RWIS Site identifier
          format: int32
        RoadWeather:
          $ref: '#/components/schemas/RwisStatusSiteRoadWeather'
        SurfaceCondition:
          $ref: '#/components/schemas/RwisStatusSiteSurfaceCondition'
      description: RWIS Status Site Weather Station
    RwisStatusSiteRoadWeather:
      type: object
      properties:
        air-temperature:
          type: integer
          description: Air temperature
          format: int32
        atmospheric-pressure:
          type: integer
          description: Atmospheric pressure
          format: int32
        avg-wind-direction:
          type: integer
          description: Average wind direction
          format: int32
        avg-wind-gust-direction:
          type: integer
          description: Average wind gust direction
          format: int32
        avg-wind-gust-speed:
          type: integer
          description: Average wind gust speed
          format: int32
        avg-wind-speed:
          type: integer
          description: Average wind speed
          format: int32
        dewpoint-temp:
          type: integer
          description: Dewpoint temperature
          format: int32
        last-update-time:
          type: string
          description: Last update time
          format: date-time
        max-temp:
          type: integer
          description: Maximum temperature
          format: int32
        min-temp:
          type: integer
          description: Minimum temperature
          format: int32
        precip-intensity:
          type: string
          description: Precipitation intensity
        precip-rate:
          type: integer
          description: Precipitation rate
          format: int32
        precip-type:
          type: string
          description: Precipitation type
        relative-humidity:
          type: integer
          description: Relative humidity
          format: int32
        visibility:
          type: integer
          description: Visibility
          format: int32
      description: RWIS Status Site Road and Weather Info
    RwisStatusSiteSurfaceCondition:
      type: object
      properties:
        ice-thickness:
          type: integer
          description: Ice thickness
          format: int32
        mobile-friction:
          type: integer
          description: Mobile friction
          format: int32
        surface-freeze-point:
          type: integer
          description: Surface freeze point
          format: int32
        surface-salinity:
          type: integer
          description: Surface salinity
          format: int32
        surface-temperatures:
          type: array
          items:
            $ref: '#/components/schemas/RwisStatusSiteSensor'
          description: Sub-surface conditions list
        surface-water-depth:
          type: integer
          description: Water level
          format: int32
        water-depth:
          type: integer
          description: Water depth
          format: int32
      description: RWIS Status Site Surface Conditions Info
    RwisStatusSiteSensor:
      type: object
      properties:
        sensor-id:
          type: integer
          description: RWIS sensor type
          format: int32
        surface-temperature:
          type: integer
          description: Surface temperature
          format: int32
      description: RWIS Status Site Sensor info
    RwisStatusV2:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        WeatherStations:
          type: array
          items:
            $ref: '#/components/schemas/RwisStatusSiteWeatherStationV2'
          description: List of RWIS Status Weather Stations
      description: RWIS Status V2
    RwisStatusSiteWeatherStationV2:
      type: object
      properties:
        station-id:
          type: string
          description: RWIS Site identifier
        RoadWeather:
          $ref: '#/components/schemas/RwisStatusSiteRoadWeatherV2'
        SurfaceCondition:
          $ref: '#/components/schemas/RwisStatusSiteSurfaceConditionV2'
      description: RWIS Status Site Weather Station V2
    RwisStatusSiteRoadWeatherV2:
      type: object
      properties:
        air-temperature:
          type: integer
          description: 'Air temperature: essAirTemperature, tenth degree C (-1000..1000), error: 1001'
          format: int32
        atmospheric-pressure:
          type: integer
          description: 'Atmospheric pressure: essAtmosphericPressure, tenths of millibar, error: 65535'
          format: int32
        avg-wind-direction:
          type: integer
          description: 'Average wind direction: essAvgWindDirection, degrees (0-360), error: 361'
          format: int32
        avg-wind-gust-direction:
          type: integer
          description: 'Average wind gust direction: essMaxWindGustDir, degrees (0-360), error: 361'
          format: int32
        avg-wind-gust-speed:
          type: integer
          description: 'Average wind gust speed: essMaxWindGustSpeed, tenths meter per sec, error: 65535'
          format: int32
        avg-wind-speed:
          type: integer
          description: 'Average wind speed: essAvgWindSpeed, tenths meter per sec, error: 65535'
          format: int32
        dewpoint-temp:
          type: integer
          description: 'Dewpoint temperature: essDewpointTemp, tenth degree C (-1000..1000), error: 1001'
          format: int32
        last-update-time:
          type: string
          description: Last update time (UTC)
          format: date-time
        precip-situation:
          type: string
          description: 'Precipitation situation: essPrecipSituation, enumeration, error: "unknown"'
        precip-rate:
          type: integer
          description: 'Precipitation rate: essPrecipRate, tenths of grams per square meter per second, error: 65535'
          format: int32
        relative-humidity:
          type: integer
          description: 'Relative humidity: essRelativeHumidity, percent (0..100), error: 101'
          format: int32
        visibility:
          type: integer
          description: 'Visibility: essVisibility, tenth-meters, error: 1000001'
          format: int32
      description: RWIS Status Site Road Weather V2
    RwisStatusSiteSurfaceConditionV2:
      type: object
      properties:
        mobile-friction:
          type: integer
          description: 'Mobile friction: essMobileFriction, percent (0..100), error: 101'
          format: int32
        surface-freeze-point:
          type: integer
          description: 'Surface freeze point: essSurfaceFreezePoint, tenth degree C (-1000..1000), error: 1001'
          format: int32
        surface-salinity:
          type: integer
          description: 'Surface salinity: essSurfaceSalinity, parts per 100,000, error: 65535'
          format: int32
        surface-temperatures:
          type: array
          items:
            $ref: '#/components/schemas/RwisStatusSiteSensorV2'
          description: Sub-Surface Conditions
        water-depth:
          type: integer
          description: 'Water depth: essSurfaceIceOrWaterDepth, tenth millimeters (0..65535), error: 65535'
          format: int32
      description: Surface Conditions
    RwisStatusSiteSensorV2:
      type: object
      properties:
        sensor-id:
          type: integer
          description: Sensor ID
          format: int32
        surface-temperature:
          type: integer
          description: 'Surface temperature: essSurfaceTemperature, tenth degree C (-1000..1000), error: 1001'
          format: int32
      description: RWIS Status Site Sensor V2
    TDInventory:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        traffic-detector-list:
          type: array
          items:
            $ref: '#/components/schemas/TDITrafficDetector'
          description: List of Traffic Detectors
      description: Traffic Detector Inventory List
    TDITrafficDetector:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/TDILocation'
        detector-station:
          $ref: '#/components/schemas/TDIDetectorStation'
      description: Traffic Detector
    TDILocation:
      type: object
      properties:
        highway-name:
          type: string
          description: Highway name
        location-name:
          type: string
          description: Location name
        location-id:
          type: integer
          description: Location identifier
          format: int32
        latitude:
          type: number
          description: Geographic latitude
          format: double
        longitude:
          type: number
          description: Geographic longitude
          format: double
        milepoint:
          type: number
          description: Milepoint
          format: double
        highway-direction:
          type: string
          description: Highway Direction
      description: Traffic Detector Inventory Location
    TDIDetectorStation:
      type: object
      properties:
        station-id:
          type: integer
          description: Station identifier
          format: int32
        jurisdiction-id:
          type: integer
          description: Jurisdiction identifier
          format: int32
        item-code:
          type: string
          description: Item Code
        station-lanes:
          type: integer
          description: Station Lanes
          format: int32
        station-class:
          type: string
          description: Station Class
        controller-description:
          type: string
          description: Item Code
        roadway-detector-list:
          type: array
          items:
            $ref: '#/components/schemas/TDIRoadwayDetector'
          description: List of Roadway Detectors
        ramp-list:
          type: array
          items:
            $ref: '#/components/schemas/TDIRampDetails'
          description: List of Ramps
      description: Detector Station
    TDIRoadwayDetector:
      type: object
      properties:
        detector-id:
          type: integer
          description: Detector Id
          format: int32
        detector-title:
          type: string
          description: Detector Title
        lane:
          type: integer
          description: Lane
          format: int32
      description: Roadway Detector
    TDIRampDetails:
      type: object
      properties:
        ramp-id:
          type: integer
          description: Lane
          format: int32
        location-id:
          type: integer
          description: Location Id
          format: int32
        ramp-lanes:
          type: integer
          description: Ramp Lanes
          format: int32
      description: Traffic Ramp Details
    TDRoadwayData:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        detector-data-items:
          type: array
          items:
            $ref: '#/components/schemas/TDRDetectorDataItem'
          description: List of Detector Data Items
      description: Traffic Detector Roadway Data
    TDRDetectorDataItem:
      type: object
      properties:
        detector-list:
          $ref: '#/components/schemas/TDRDetectorList'
      description: Traffic Detector
    TDRDetectorList:
      type: object
      properties:
        detector-data-detail:
          $ref: '#/components/schemas/TDRDetectorDataDetail'
      description: Traffic Detector Inventory Location
    TDRDetectorDataDetail:
      type: object
      properties:
        station-id:
          type: integer
          description: Station identifier
          format: int32
        detector-id:
          type: integer
          description: Detector Id
          format: int32
        lane:
          type: integer
          description: Lane
          format: int32
        detection-time-stamp:
          type: string
          description: Detection Time Stamp
          format: date-time
        vehicle-count:
          type: integer
          description: Vehicle Count
          format: int32
        vehicle-occupancy:
          type: integer
          description: Vehicle Occupancy
          format: int32
        detector-reliability:
          type: integer
          description: Detector Reliability
          format: int32
        vehicle-speed:
          type: integer
          description: Vehicle Speed
          format: int32
      description: Detector Station
    TDRampData:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        ramp-meter-status-items:
          type: array
          items:
            $ref: '#/components/schemas/TDRampMeterStatusItem'
          description: List of Ramp Meter Status Items
      description: Traffic Detector Ramp Data
    TDRampMeterStatusItem:
      type: object
      properties:
        device-status-header:
          $ref: '#/components/schemas/TDRDeviceStatusHeader'
        metered-lane-list:
          type: array
          items:
            $ref: '#/components/schemas/TDRMeteredLaneList'
          description: Metered Lane List
        mainline-flow-rate:
          type: integer
          description: Mainline Volume
          format: int32
        mainline-vehicle-occupancy:
          type: integer
          description: Mainline Occupancy
          format: int32
        mainline-vehicle-speed:
          type: integer
          description: Mainline Vehicle Speed
          format: int32
      description: Ramp Meter Status Item
    TDRDeviceStatusHeader:
      type: object
      properties:
        ramp-id:
          type: integer
          description: Ramp Id
          format: int32
        device-status:
          type: string
          description: Device Status
        center-id:
          type: integer
          description: Jurisdiction
          format: int32
        response-plan-id:
          type: integer
          description: Response Plan
          format: int32
        last-comm-time:
          type: string
          description: Last Communication Time
          format: date-time
      description: Device Status Header
    TDRMeteredLaneList:
      type: object
      properties:
        metered-lane:
          $ref: '#/components/schemas/TDRMeteredLane'
      description: Metered Lane
    TDRMeteredLane:
      type: object
      properties:
        meter-implemented-action:
          type: integer
          description: Meter Implemented Action
          format: int32
        implemented-meter-command-source:
          type: integer
          description: Implemented Meter Command Source
          format: int32
        meter-implemented-plan:
          type: integer
          description: Meter Implemented Plan
          format: int32
        meter-implemented-rate:
          type: integer
          description: Meter Implemented Rate
          format: int32
        meter-implemented-vehicles-per-green:
          type: integer
          description: Implemented Vehicles Per Green
          format: int32
        meter-requested-action:
          type: integer
          description: Meter Requested Action
          format: int32
        meter-requested-plan:
          type: integer
          description: Meter Requested Plan
          format: int32
        meter-requested-rate:
          type: integer
          description: Meter Requested Rate
          format: int32
        meter-requested-vehicles-per-green:
          type: integer
          description: Meter Requested Vehicles Per Green
          format: int32
        metered-lane-vehicle-count:
          type: integer
          description: Metered Lane Vehicle Count
          format: int32
      description: Metered Lane
    LocalEvents:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        Incidents:
          type: array
          items:
            $ref: '#/components/schemas/LocalEvent'
          description: List of TLE Events
      description: TLE Events
    LocalEvent:
      type: object
      properties:
        Id:
          type: integer
          description: Event Id
          format: int32
        LocationDescription:
          type: string
          description: Description of the event location
        Type:
          type: string
          description: Event type
        Impact:
          type: string
          description: Event impact
        Headline:
          type: string
          description: Event headline text
        Comments:
          type: string
          description: Event comments
        CreateTime:
          type: string
          description: Event creation timestamp
          format: date-time
        EventStart:
          type: string
          description: Event publish date
          format: date-time
        EventEnd:
          type: string
          description: Event remove date
          format: date-time
        StartLat:
          type: number
          description: Head latitude for point and line events
          format: double
        StartLong:
          type: number
          description: Head longitude for point and line events
          format: double
        EndLat:
          type: number
          description: Tail latitude for line events
          format: double
        EndLong:
          type: number
          description: Tail longitude for line events
          format: double
        GeometryWkt:
          type: string
          description: Geometry well-known text for line and area events
        SourceAgency:
          type: string
          description: Source agency
        ContactEmail:
          type: string
          description: Contact email
        ContactName:
          type: string
          description: Contact name
        ContactOrganization:
          type: string
          description: Contact organization
        ContactPhone:
          type: string
          description: Contact phone number
        Direction:
          type: string
          description: 'Direction impacted [ ONE_DIRECTION | BOTH_DIRECTIONS ]'
        UpdateTime:
          type: string
          description: Last updated timestamp
          format: date-time
      description: TLE Event Item
    TLEWazeMetadata:
      type: object
      properties:
        organization-information:
          $ref: '#/components/schemas/OrganizationInfo'
        TLE-incident-items:
          $ref: '#/components/schemas/TleIncidentItems'
        Waze-incident-items:
          $ref: '#/components/schemas/WazeIncidentItems'
      description: All Incidents Metadata
    TleIncidentItems:
      type: object
      properties:
        TLE-incd-type-list:
          type: array
          items:
            $ref: '#/components/schemas/TleIncidentType'
          description: List of possible TLE incident types
        TLE-travel-impact-list:
          type: array
          items:
            $ref: '#/components/schemas/TleTravelImpact'
          description: List of possible TLE impact categories
      description: Class to hold the arrays of different TLE incident metadata items
    WazeIncidentItems:
      type: object
      properties:
        Waze-incd-type-list:
          type: array
          items:
            $ref: '#/components/schemas/WazeIncidentType'
          description: List of possible Waze incident types
      description: Class to hold the arrays of different TLE incident metadata items
    TleIncidentType:
      type: object
      properties:
        type-id:
          type: integer
          description: Id of TLE incident type
          format: int32
        type:
          type: string
          description: Description of TLE incident type
      description: Class to hold details about an individual TLE incident type
    TleTravelImpact:
      type: object
      properties:
        impact-id:
          type: integer
          description: Id of TLE impact category
          format: int32
        impact-desc:
          type: string
          description: Description of TLE impact category
      description: Class to hold details about an individual TLE severity category
    WazeIncidentType:
      type: object
      properties:
        type:
          type: string
          description: Description of Waze incident type
      description: Class to hold details about an individual Waze incident type
    WZDxActivities:
      type: object
      properties:
        Header:
          $ref: '#/components/schemas/WZDxHeader'
        Activities:
          type: array
          items:
            $ref: '#/components/schemas/WZDxActivity'
          description: List of Work Zone Activities
      description: WZDx Activities List
    WZDxHeader:
      type: object
      properties:
        TimeStampUpdate:
          type: string
          description: Timestamp Update
          format: date-time
        MetadataURL:
          type: string
          description: Metadata URL
        VersionNo:
          type: string
          description: Version Number
      description: This class contains all the WorkZone Activity fields
    WZDxActivity:
      type: object
      properties:
        Identifier:
          type: string
          description: A unique identifier of the work zone activity
        SubIdentifier:
          type: integer
          description: The subidentifier is the identifier of the entirety of the work zone project
          format: int32
        StartDateTime:
          $ref: '#/components/schemas/WZDxStartDates'
        EndDateTime:
          $ref: '#/components/schemas/WZDxEndDates'
        BeginLocation:
          $ref: '#/components/schemas/WZDxBeginLocation'
        EndLocation:
          $ref: '#/components/schemas/WZDxEndLocation'
        WZStatus:
          type: string
          description: Work zone status
        TotalLanes:
          type: integer
          description: Total lanes along roadway segment
          format: int32
        Lanes:
          type: array
          items:
            $ref: '#/components/schemas/WZDxLane'
          description: List of Lanes
        WorkersPresent:
          type: string
          description: Workers Present
        ReducedSpdPosted:
          type: string
          description: Reduced Speed Posted
        RoadRestrictions:
          type: string
          description: Road Restrictions
        Description:
          type: string
          description: Short description of the work zone
        IssuingOrganization:
          type: string
          description: Issuing organization
        TimeStampEventCreation:
          type: string
          description: Datetime of event creation
          format: date-time
        TimeStampEventUpdate:
          type: string
          description: Datetime of event update
          format: date-time
      description: Work Zone Activity
    WZDxStartDates:
      type: object
      properties:
        StartDateTimeEst:
          type: string
          description: The estimated time and date when a work zone starts
          format: date-time
      description: WZDx Events Start Dates
    WZDxEndDates:
      type: object
      properties:
        EndDateTimeEst:
          type: string
          description: The estimated time and date when a work zone ends
          format: date-time
      description: WZDx Events End Dates
    WZDxBeginLocation:
      type: object
      properties:
        RoadName:
          type: string
          description: The name of the road on which the work zone applies
        RoadNum:
          type: string
          description: The designated road number
        RoadDirection:
          type: string
          description: The designated direction of the roadway that is impacted by the work zone activity
        Latitude:
          type: number
          description: The estimated latitude along the roadway where the work zone area begins
          format: double
        Longitude:
          type: number
          description: The estimated longitude along the roadway where the workzone area begins
          format: double
        Milepoint:
          type: number
          description: The milepost marker along a roadway where the workzone begins
          format: double
        CrossStreet:
          type: string
          description: The cross street along the roadway where the work zone area begins
      description: Work Zone Event Begin Location
    WZDxEndLocation:
      type: object
      properties:
        Latitude:
          type: number
          description: The estimated latitude along the roadway where the work zone area ends
          format: double
        Longitude:
          type: number
          description: The estimated longitude along the roadway where the workzone area ends
          format: double
        Milepoint:
          type: number
          description: The milepost marker along a roadway where the workzone ends
          format: double
        CrossStreet:
          type: string
          description: The cross street along the roadway where the work zone area ends
      description: Work Zone Event End Location
    WZDxLane:
      type: object
      properties:
        LaneEdgeReference:
          type: string
          description: Lane Edge Reference
        LaneNumber:
          type: string
          description: Lane Number
        LaneStatus:
          type: string
          description: Lane Status
        LaneType:
          type: string
          description: Lane Type
      description: Open Lanes
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]